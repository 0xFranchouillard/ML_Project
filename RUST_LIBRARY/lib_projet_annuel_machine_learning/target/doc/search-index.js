var searchIndex = JSON.parse('{\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[null],"p":[]},\
"getrandom":{"doc":"Interface to the operating system’s random number …","t":[3,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,18,18,18,18,11,11],"n":["Error","getrandom","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","fmt","fmt","eq","ne","from","clone","UNSUPPORTED","ERRNO_NOT_POSITIVE","IOS_SEC_RANDOM","WINDOWS_RTL_GEN_RANDOM","FAILED_RDRAND","NO_RDRAND","WEB_CRYPTO","WEB_GET_RANDOM_VALUES","VXWORKS_RAND_SECURE","NODE_CRYPTO","NODE_RANDOM_FILL_SYNC","INTERNAL_START","CUSTOM_START","raw_os_error","code"],"q":["getrandom","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A small and <code>no_std</code> compatible error type","Fill <code>dest</code> with random bytes from the system’s preferred …","","","","","","","","","","","","","","","","","This target/platform is not supported by <code>getrandom</code>.","The platform-specific <code>errno</code> returned a non-positive value.","Call to iOS <code>SecRandomCopyBytes</code> failed.","Call to Windows <code>RtlGenRandom</code> failed.","RDRAND instruction failed due to a hardware issue.","RDRAND instruction unsupported on this target.","The browser does not have support for <code>self.crypto</code>.","The browser does not have support for …","On VxWorks, call to <code>randSecure</code> failed (random number …","NodeJS does not have support for the <code>crypto</code> module.","NodeJS does not have support for <code>crypto.randomFillSync</code>.","Codes below this point represent OS Errors (i.e. positive …","Codes at or above this point can be used by users to …","Extract the raw OS error code (if this error came from …","Extract the bare error code."],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[],[["result",4],["error",3]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",3]],["bool",15]],[[["error",3]],["bool",15]],[[["nonzerou32",3]]],[[],["error",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["i32",15],["option",4]]],[[],["nonzerou32",3]]],"p":[[3,"Error"]]},\
"lib_projet_annuel_machine_learning":{"doc":"","t":[5,5,5,5,5],"n":["create_linear_model","train_rosenblatt_linear_model","predict_linear_model_regression","predict_linear_model_classification","destroy_linear_model"],"q":["lib_projet_annuel_machine_learning","","","",""],"d":["","","","",""],"i":[0,0,0,0,0],"f":[[[["i32",15]]],[[["f32",15],["i32",15]]],[[["i32",15]],["f32",15]],[[["i32",15]],["f32",15]],[[["i32",15]]]],"p":[]},\
"libm":{"doc":"libm in pure Rust","t":[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["acos","acosf","acosh","acoshf","asin","asinf","asinh","asinhf","atan","atan2","atan2f","atanf","atanh","atanhf","cbrt","cbrtf","ceil","ceilf","copysign","copysignf","cos","cosf","cosh","coshf","erf","erfc","erfcf","erff","exp","exp10","exp10f","exp2","exp2f","expf","expm1","expm1f","fabs","fabsf","fdim","fdimf","floor","floorf","fma","fmaf","fmax","fmaxf","fmin","fminf","fmod","fmodf","frexp","frexpf","hypot","hypotf","ilogb","ilogbf","j0","y0","j0f","y0f","j1","y1","j1f","y1f","jn","yn","jnf","ynf","ldexp","ldexpf","lgamma","lgamma_r","lgammaf","lgammaf_r","log","log10","log10f","log1p","log1pf","log2","log2f","logf","modf","modff","nextafter","nextafterf","pow","powf","remainder","remainderf","remquo","remquof","round","roundf","scalbn","scalbnf","sin","sincos","sincosf","sinf","sinh","sinhf","sqrt","sqrtf","tan","tanf","tanh","tanhf","tgamma","tgammaf","trunc","truncf"],"q":["libm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Arccosine (f64)","Arccosine (f32)","Inverse hyperbolic cosine (f64)","Inverse hyperbolic cosine (f32)","Arcsine (f64)","Arcsine (f32)","Inverse hyperbolic sine (f64)","Inverse hyperbolic sine (f32)","Arctangent (f64)","Arctangent of y/x (f64)","Arctangent of y/x (f32)","Arctangent (f32)","Inverse hyperbolic tangent (f64)","Inverse hyperbolic tangent (f32)","Computes the cube root of the argument.","Cube root (f32)","Ceil (f64)","Ceil (f32)","Sign of Y, magnitude of X (f64)","Sign of Y, magnitude of X (f32)","","","Hyperbolic cosine (f64)","Hyperbolic cosine (f64)","Error function (f64)","Error function (f64)","Error function (f32)","Error function (f32)","Exponential, base <em>e</em> (f64)","","","Exponential, base 2 (f64)","Exponential, base 2 (f32)","Exponential, base <em>e</em> (f32)","Exponential, base <em>e</em>, of x-1 (f64)","Exponential, base <em>e</em>, of x-1 (f32)","Absolute value (magnitude) (f64) Calculates the absolute …","Absolute value (magnitude) (f32) Calculates the absolute …","Positive difference (f64)","Positive difference (f32)","Floor (f64)","Floor (f32)","Floating multiply add (f64)","Floating multiply add (f32)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]]],[[["f32",15]]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["i32",15]],[[["f32",15]],["i32",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f32",15]],["f32",15]],[[["f64",15],["i32",15]],["f64",15]],[[["f64",15],["i32",15]],["f64",15]],[[["f32",15],["i32",15]],["f32",15]],[[["f32",15],["i32",15]],["f32",15]],[[["f64",15],["i32",15]],["f64",15]],[[["f32",15],["i32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f64",15]]],[[["f32",15]],["f32",15]],[[["f32",15]]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f32",15]],["f32",15]],[[["f64",15]]],[[["f32",15]]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]]],[[["f32",15]]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15],["i32",15]],["f64",15]],[[["f32",15],["i32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f64",15]]],[[["f32",15]]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]],[[["f64",15]],["f64",15]],[[["f32",15]],["f32",15]]],"p":[]},\
"matrixmultiply":{"doc":"General matrix multiplication for f32, f64 matrices. …","t":[5,5],"n":["dgemm","sgemm"],"q":["matrixmultiply",""],"d":["General matrix multiplication (f64)","General matrix multiplication (f32)"],"i":[0,0],"f":[[[["usize",15],["f64",15],["isize",15]]],[[["usize",15],["f32",15],["isize",15]]]],"p":[]},\
"ndarray":{"doc":"The <code>ndarray</code> crate provides an <em>n</em>-dimensional container for …","t":[0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,0,0,5,5,8,16,10,3,5,3,12,3,12,12,12,8,18,16,16,16,10,10,11,11,11,11,10,11,10,8,16,10,8,10,8,16,8,16,3,8,4,13,13,13,13,13,13,3,5,5,8,16,10,10,3,3,12,12,12,8,16,10,10,10,3,4,13,12,12,12,13,13,8,8,8,5,5,5,3,8,16,10,10,10,3,8,16,16,10,10,10,10,3,8,10,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,8,16,8,8,16,10,8,8,8,16,10,5,5,5,5,5,5,5,5,8,16,10,10,5,5,5,5,4,13,13,8,16,16,16,10,8,16,16,10,10,3,6,6,3,6,6,6,6,6,6,6,3,3,3,3,4,13,13,11,11,8,14,14,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["iter","Axes","Indices","IndicesIter","AxisChunksIter","AxisChunksIterMut","AxisIter","AxisIterMut","ExactChunks","ExactChunksIter","ExactChunksIterMut","ExactChunksMut","IndexedIter","IndexedIterMut","Iter","IterMut","Lanes","LanesIter","LanesIterMut","LanesMut","Windows","split_at","split_at","split_at","split_at","prelude","linalg","general_mat_mul","general_mat_vec_mul","Dot","Output","dot","Dim","Dim","Axis","0","AxisDescription","axis","len","stride","Dimension","NDIM","Pattern","Smaller","Larger","ndim","into_pattern","size","size_checked","as_array_view","as_array_view_mut","zeros","into_dyn","__private__","IntoDimension","Dim","into_dimension","RemoveAxis","remove_axis","DimAdd","Output","DimMax","Output","IxDynImpl","NdIndex","ErrorKind","IncompatibleShape","IncompatibleLayout","RangeLimited","OutOfBounds","Unsupported","Overflow","ShapeError","indices","indices_of","MultiSliceArg","Output","multi_slice_move","__private__","NewAxis","Slice","start","end","step","SliceArg","OutDim","in_ndim","out_ndim","__private__","SliceInfo","SliceInfoElem","Slice","start","end","step","Index","NewAxis","AsArray","NdFloat","LinalgScalar","concatenate","stack","stack_new_axis","MathCell","IndexLonger","Output","index","get","uget","Shape","ShapeBuilder","Dim","Strides","into_shape","f","set_f","strides","StrideShape","AssignElem","assign_elem","Ix0","Ix1","Ix2","Ix3","Ix4","Ix5","Ix6","IxDyn","Ix0","Ix1","Ix2","Ix3","Ix4","Ix5","Ix6","IxDyn","Array0","Array1","Array2","Array3","Array4","Array5","Array6","ArrayD","ArrayView0","ArrayView1","ArrayView2","ArrayView3","ArrayView4","ArrayView5","ArrayView6","ArrayViewD","ArrayViewMut0","ArrayViewMut1","ArrayViewMut2","ArrayViewMut3","ArrayViewMut4","ArrayViewMut5","ArrayViewMut6","ArrayViewMutD","ArcArray1","ArcArray2","Data","DataMut","DataOwned","MaybeUninit","DataShared","RawData","Elem","__private__","RawDataClone","RawDataMut","RawDataSubst","Output","data_subst","arr0","arr1","rcarr1","aview0","aview1","aview2","aview_mut1","aview_mut2","FixedInitializer","Elem","as_init_slice","len","arr2","rcarr2","arr3","rcarr3","FoldWhile","Continue","Done","IntoNdProducer","Item","Dim","Output","into_producer","NdProducer","Item","Dim","raw_dim","__private__","Zip","Ix","Ixs","ArrayBase","ArcArray","Array","CowArray","ArrayView","ArrayViewMut","RawArrayView","RawArrayViewMut","OwnedRepr","OwnedArcRepr","RawViewRepr","ViewRepr","CowRepr","View","Owned","is_view","is_owned","ScalarOperand","array","s","stack","concatenate","stack_new_axis","azip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","_data_slice","_data_slice","_data_slice","_data_slice","_data_slice","_data_slice","_data_slice","try_ensure_unique","try_is_unique","try_ensure_unique","try_is_unique","try_ensure_unique","try_is_unique","try_ensure_unique","try_is_unique","try_ensure_unique","try_is_unique","clone_with_ptr","clone_with_ptr","clone_with_ptr","clone_with_ptr","clone_from_with_ptr","clone_with_ptr","clone_with_ptr","into_owned","to_shared","into_owned","into_owned","into_owned","into_owned","new","into_shared","new","into_shared","data_subst","data_subst","data_subst","data_subst","data_subst","data_subst","into_shape","f","set_f","strides","in_ndim","out_ndim","in_ndim","out_ndim","in_ndim","out_ndim","in_ndim","out_ndim","in_ndim","out_ndim","in_ndim","out_ndim","in_ndim","out_ndim","in_ndim","out_ndim","contiguous_stride","contiguous_stride","contiguous_stride","contiguous_stride","contiguous_stride","contiguous_stride","contiguous_stride","into_dimension","into_dimension","ndim","slice","slice_mut","_fastest_varying_stride_order","into_pattern","zeros","next_for","insert_axis","try_remove_axis","ndim","slice","slice_mut","into_pattern","zeros","next_for","equal","size","size_checked","default_strides","_fastest_varying_stride_order","min_stride_axis","max_stride_axis","first_index","stride_offset","stride_offset_checked","insert_axis","try_remove_axis","from_dimension","ndim","into_pattern","slice","slice_mut","zeros","next_for","equal","size","size_checked","last_elem","set_last_elem","default_strides","fortran_strides","_fastest_varying_stride_order","min_stride_axis","first_index","stride_offset","stride_offset_checked","insert_axis","try_remove_axis","ndim","into_pattern","slice","slice_mut","size","zeros","next_for","stride_offset","stride_offset_checked","_fastest_varying_stride_order","insert_axis","try_remove_axis","ndim","into_pattern","slice","slice_mut","zeros","insert_axis","try_remove_axis","ndim","into_pattern","slice","slice_mut","zeros","insert_axis","try_remove_axis","ndim","into_pattern","slice","slice_mut","zeros","insert_axis","try_remove_axis","ndim","slice","slice_mut","into_pattern","zeros","insert_axis","try_remove_axis","from_dimension","into_dyn","index_checked","index_unchecked","index_checked","index_unchecked","index_checked","index_unchecked","index_checked","index_unchecked","index_checked","index_unchecked","index_checked","index_unchecked","index_checked","index_unchecked","index_checked","index_unchecked","index_checked","index_unchecked","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","dot","dot","dot","dot","index","get","uget","drop","as_ref","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","next_back","nth_back","rfold","next_back","nth_back","rfold","next_back","next_back","next_back","next_back","next_back","len","len","len","len","len","len","len","len","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","next","size_hint","fold","next","size_hint","next","size_hint","next","size_hint","fold","nth","collect","all","any","find","find_map","count","last","position","next","size_hint","next","size_hint","fold","nth","collect","all","any","find","find_map","count","last","position","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","fold","size_hint","clone","clone_from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from","default","default","default","default","cmp","cmp","eq","eq","eq","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","partial_cmp","lt","le","gt","ge","partial_cmp","deref","deref","deref","deref_mut","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","div","div","div","rem","rem","rem","sub","sub","sub","sub","sub","add","add","add","add","add","mul","mul","mul","mul","mul","neg","add_assign","add_assign","add_assign","add_assign","add_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","div_assign","div_assign","rem_assign","rem_assign","not","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","shl","shl","shl","shr","shr","shr","bitand_assign","bitand_assign","bitor_assign","bitor_assign","bitxor_assign","bitxor_assign","shl_assign","shl_assign","shr_assign","shr_assign","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","hash","hash","hash","hash","hash","hash","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","from_iter","fmt","fmt","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","kind","from_kind","new","into_inner","swap","size","new","step_by","is_slice","is_index","is_new_axis","new","in_ndim","out_ndim","from","indexed","size","for_each","apply","fold","fold_while","all","and","and_broadcast","map_collect","apply_collect","map_assign_into","apply_assign_into","split","for_each","apply","fold","fold_while","all","and","and_broadcast","map_collect","apply_collect","map_assign_into","apply_assign_into","split","for_each","apply","fold","fold_while","all","and","and_broadcast","map_collect","apply_collect","map_assign_into","apply_assign_into","split","for_each","apply","fold","fold_while","all","and","and_broadcast","map_collect","apply_collect","map_assign_into","apply_assign_into","split","for_each","apply","fold","fold_while","all","and","and_broadcast","map_collect","apply_collect","map_assign_into","apply_assign_into","split","for_each","apply","fold","fold_while","all","split","into_inner","is_done","axis","len","stride","index","NDIM","size","size_checked","as_array_view","as_array_view_mut","into_dyn","zeros","zeros","from_vec","from_iter","linspace","range","logspace","geomspace","eye","from_diag","from_elem","zeros","ones","default","from_shape_simple_fn","from_shape_fn","from_shape_vec","from_shape_vec_unchecked","uninit","uninitialized","maybe_uninit","len","len_of","is_empty","ndim","dim","raw_dim","shape","strides","stride_of","view","view_mut","cell_view","to_owned","to_shared","into_owned","into_shared","first","first_mut","iter","iter_mut","indexed_iter","indexed_iter_mut","slice","slice_mut","multi_slice_mut","slice_move","slice_collapse","slice_axis","slice_axis_mut","slice_axis_inplace","slice_each_axis","slice_each_axis_mut","slice_each_axis_inplace","get","get_mut","uget","uget_mut","swap","uswap","index_axis","index_axis_mut","index_axis_move","collapse_axis","select","rows","genrows","rows_mut","genrows_mut","columns","gencolumns","columns_mut","gencolumns_mut","lanes","lanes_mut","outer_iter","outer_iter_mut","axis_iter","axis_iter_mut","axis_chunks_iter","axis_chunks_iter_mut","exact_chunks","exact_chunks_mut","windows","diag","diag_mut","into_diag","is_standard_layout","as_standard_layout","as_ptr","as_mut_ptr","raw_view","raw_view_mut","as_slice","as_slice_mut","as_slice_memory_order","as_slice_memory_order_mut","into_shape","reshape","into_dyn","into_dimensionality","broadcast","swap_axes","permuted_axes","reversed_axes","t","axes","max_stride_axis","invert_axis","merge_axes","insert_axis","remove_axis","assign","assign_to","fill","zip_mut_with","fold","map","map_mut","mapv","mapv_into","map_inplace","mapv_inplace","for_each","visit","fold_axis","map_axis","map_axis_mut","accumulate_axis_inplace","into_scalar","into_scalar","into_raw_vec","into_raw_vec","assume_init","to_vec","row","row_mut","nrows","column","column_mut","ncols","is_square","insert_axis_inplace","index_axis_inplace","sum","scalar_sum","mean","product","var","std","sum_axis","mean_axis","var_axis","std_axis","dot","dot","scaled_add","from_shape","from_shape_ptr","from_shape","from_shape_ptr","from_shape","from_shape_ptr","reborrow","from_shape","from_shape_ptr","reborrow","reborrow","to_slice","reborrow","to_slice","into_scalar","into_scalar","into_scalar","into_scalar","into_slice","into_cell_view","into_slice","into_cell_view","split_at","split_at","split_at","multi_slice_move","split_at","multi_slice_move","from_shape_ptr","deref_into_view","split_at","cast","from_shape_ptr","deref_into_view","split_at","cast","from_shape_ptr","deref_into_view","deref_into_view_mut","split_at","cast","from_shape_ptr","deref_into_view","deref_into_view_mut","split_at","cast","is_view","is_owned","is_view","is_owned"],"q":["ndarray","ndarray::iter","","","","","","","","","","","","","","","","","","","","","","","","ndarray","","ndarray::linalg","","","","","ndarray","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray::SliceInfoElem","","","ndarray","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray::iterndarrayndarray::iter","","","ndarrayndarray::iter","","","","","","","","","","","","","","","","","","","ndarray","","ndarray::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray","","","","ndarray::iter","","","","","","","","","","","ndarray","","","","","","","","","","ndarray::iter","ndarray","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray::iter","","ndarray","","","","","","","","","ndarray::iter","ndarrayd":["Producers, iterables and iterators.","An iterator over the length and stride of each axis of an …","Indices producer and iterable.","An iterator over the indexes of an array shape.","An iterator that traverses over the specified axis and …","An iterator that traverses over the specified axis and …","An iterator that traverses over an axis and and yields …","An iterator that traverses over an axis and and yields …","Exact chunks producer and iterable.","Exact chunks iterator.","Exact chunks iterator.","Exact chunks producer and iterable.","An iterator over the indexes and elements of an array.","An iterator over the indexes and elements of an array …","An iterator over the elements of an array.","An iterator over the elements of an array (mutable).","See <code>.lanes()</code> for more information.","An iterator that traverses over all axes but one, and …","An iterator that traverses over all dimensions but the …","See <code>.lanes_mut()</code> for more information.","Window producer and iterable","Splits the iterator at <code>index</code>, yielding two disjoint …","Splits the iterator at <code>index</code>, yielding two disjoint …","Splits the iterator at index, yielding two disjoint …","Splits the iterator at index, yielding two disjoint …","ndarray prelude.","Linear algebra.","General matrix-matrix multiplication.","General matrix-vector multiplication.","Matrix Multiplication","The result of the operation.","","Dimension description.","Create a new dimension value.","An axis index.","","Description of the axis, its length and its stride.","","","","Array shape and index trait.","For fixed-size dimension representations (e.g. <code>Ix2</code>), this …","Pattern matching friendly form of the dimension value.","Next smaller dimension (if applicable)","Next larger dimension","Returns the number of dimensions (number of axes).","Convert the dimension into a pattern matching friendly …","Compute the size of the dimension (number of elements)","Compute the size while checking for overflow.","Borrow as a read-only array view.","Borrow as a read-write array view.","Creates a dimension of all zeros with the specified ndim.","Convert the dimensional into a dynamic dimensional …","This trait is private to implement; this method exists to …","Argument conversion a dimension.","","","Array shape with a next smaller dimension.","","Adds the two dimensions at compile time.","The sum of the two dimensions.","","The resulting dimension type after broadcasting.","Dynamic dimension or index type.","Tuple or fixed size arrays that can be used to index an …","Error code for an error related to array shape or layout.","incompatible shape","incompatible memory layout","the shape does not fit inside type limits","out of bounds indexing","aliasing array elements","overflow when computing offset, length, etc.","An error related to array shape or layout.","Create an iterable of the array shape <code>shape</code>.","Return an iterable of the indices of the passed-in array.","Slicing information describing multiple mutable, disjoint …","The type of the slices created by <code>.multi_slice_move()</code>.","Split the view into multiple disjoint slices.","This trait is private to implement; this method exists to …","Token to represent a new axis in a slice description.","A slice (range with step size).","","","","A type that can slice an array of dimension <code>D</code>.","Dimensionality of the output array.","Returns the number of axes in the input array.","Returns the number of axes in the output array.","This trait is private to implement; this method exists to …","Represents all of the necessary information to perform a …","A slice (range with step), an index, or a new axis token.","A range with step size. <code>end</code> is an exclusive index. …","","","","A single index.","A new axis of length 1.","Argument conversion into an array view","Floating-point element types <code>f32</code> and <code>f64</code>.","Elements that support linear algebra operations.","Concatenate arrays along the given axis.","Stack arrays along the new axis.","Stack arrays along the new axis.","A transparent wrapper of <code>Cell<T></code> which is identical in …","Extra indexing methods for array views","The type of the reference to the element that is …","Get a reference of a element through the view.","Get a reference of a element through the view.","Get a reference of a element through the view without …","A contiguous array shape of n dimensions.","A trait for <code>Shape</code> and <code>D where D: Dimension</code> that allows …","","","","","","","An array shape of n dimensions in c-order, f-order or …","A producer element that can be assigned to once","Assign the value <code>input</code> to the element that self …","Create a zero-dimensional index","Create a one-dimensional index","Create a two-dimensional index","Create a three-dimensional index","Create a four-dimensional index","Create a five-dimensional index","Create a six-dimensional index","Create a dynamic-dimensional index","zero-dimensionial","one-dimensional","two-dimensional","three-dimensional","four-dimensional","five-dimensional","six-dimensional","dynamic-dimensional","zero-dimensional array","one-dimensional array","two-dimensional array","three-dimensional array","four-dimensional array","five-dimensional array","six-dimensional array","dynamic-dimensional array","zero-dimensional array view","one-dimensional array view","two-dimensional array view","three-dimensional array view","four-dimensional array view","five-dimensional array view","six-dimensional array view","dynamic-dimensional array view","zero-dimensional read-write array view","one-dimensional read-write array view","two-dimensional read-write array view","three-dimensional read-write array view","four-dimensional read-write array view","five-dimensional read-write array view","six-dimensional read-write array view","dynamic-dimensional read-write array view","one-dimensional shared ownership array","two-dimensional shared ownership array","Array representation trait.","Array representation trait.","Array representation trait.","Corresponding owned data with MaybeUninit elements","Array representation trait.","Array representation trait.","The array element type.","This trait is private to implement; this method exists to …","Array representation trait.","Array representation trait.","Array representation trait.","The resulting array storage of the same kind but …","Unsafely translate the data representation from one …","Create a zero-dimensional array with the element <code>x</code>.","Create a one-dimensional array with elements from <code>xs</code>.","Create a one-dimensional array with elements from <code>xs</code>.","Create a zero-dimensional array view borrowing <code>x</code>.","Create a one-dimensional array view with elements …","Create a two-dimensional array view with elements …","Create a one-dimensional read-write array view with …","Create a two-dimensional read-write array view with …","Fixed-size array used for array initialization","","","","Create a two-dimensional array with elements from <code>xs</code>.","Create a two-dimensional array with elements from <code>xs</code>.","Create a three-dimensional array with elements from <code>xs</code>.","Create a three-dimensional array with elements from <code>xs</code>.","Value controlling the execution of <code>.fold_while</code> on <code>Zip</code>.","Continue folding with this value","Fold is complete and will return this value","Argument conversion into a producer.","The element produced per iteration.","Dimension type of the producer","","Convert the value into an <code>NdProducer</code>.","A producer of an n-dimensional set of elements; for …","The element produced per iteration.","Dimension type","Return the shape of the producer.","This trait is private to implement; this method exists to …","Lock step function application across several arrays or …","Array index type","Array index type (signed)","An <em>n</em>-dimensional array.","An array where the data has shared ownership and is copy …","An array that owns its data uniquely.","An array with copy-on-write behavior.","A read-only array view.","A read-write array view.","A read-only array view without a lifetime.","A mutable array view without a lifetime.","Array’s representation.","ArcArray’s representation.","Array pointer’s representation.","Array view’s representation.","CowArray’s representation.","Borrowed data.","Owned data.","Returns <code>true</code> iff the data is the <code>View</code> variant.","Returns <code>true</code> iff the data is the <code>Owned</code> variant.","Elements that can be used as direct operands in …","Create an <strong><code>Array</code></strong> with one, two or three dimensions.","Slice argument constructor.","Stack arrays along the new axis.","Concatenate arrays along the given axis.","Stack arrays along the new axis.","Array zip macro: lock step function application across …elf is an index, return the stride offset","Return stride offset for this dimension and index.","","","","","","","","","","","","","","","","","","","","Self is an index, return the stride offset","Return stride offset for this dimension and index.","","","","","","","","","","Self is an index, return the stride offset","Return stride offset for this dimension and index.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compute the dot product of one-dimensional arrays.","Perform the matrix multiplication of the row vector <code>self</code> …","","","Convert a mutable array view to a mutable reference of a …","Convert a mutable array view to a mutable reference of a …","Convert a mutable array view to a mutable reference of a …","","","Create a one-dimensional array from a vector (no copying …","Create a one-dimensional read-only array view of the data …","Create a read-only array view of the array.","Create a one-dimensional read-write array view of the …","Create a read-write array view of the array.","Converts the <code>Vec</code> of arrays to an owned 2-D array.","Converts the <code>Vec</code> of arrays to an owned 3-D array.","Create a <code>Shape</code> from <code>dimension</code>, using the default memory …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Array</code> implements <code>.clone_from()</code> to reuse an array’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Perform an elementwise negation of <code>self</code> and return the …","","","","","","","","","","","","","","","","","","","","Perform an elementwise unary not of <code>self</code> and return the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a one-dimensional array from an iterable.","","","","","","","","","","","","","","","","","Return the <code>ErrorKind</code> of this error.","Create a new <code>ShapeError</code>","Create a new cell with the given value","Return the inner value","Swap value with another cell","Return the size of the shape in number of elements","Create a new <code>Slice</code> with the given extents.","Create a new <code>Slice</code> with the given step size (multiplied …","Returns <code>true</code> if <code>self</code> is a <code>Slice</code> value.","Returns <code>true</code> if <code>self</code> is an <code>Index</code> value.","Returns <code>true</code> if <code>self</code> is a <code>NewAxis</code> value.","Returns a new <code>SliceInfo</code> instance.","Returns the number of dimensions of the input array for …","Returns the number of dimensions after calling <code>.slice()</code> …","Create a new <code>Zip</code> from the input array or other producer <code>p</code>.","Create a new <code>Zip</code> with an index producer and the producer <code>p</code>…","Return a the number of element tuples in the Zip","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to the input arrays while the return…","Tests if every element of the iterator matches a …","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Split the <code>Zip</code> evenly in two.","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to the input arrays while the return…","Tests if every element of the iterator matches a …","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Split the <code>Zip</code> evenly in two.","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to the input arrays while the return…","Tests if every element of the iterator matches a …","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Split the <code>Zip</code> evenly in two.","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to the input arrays while the return…","Tests if every element of the iterator matches a …","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Split the <code>Zip</code> evenly in two.","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to the input arrays while the return…","Tests if every element of the iterator matches a …","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Split the <code>Zip</code> evenly in two.","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to the input arrays while the return…","Tests if every element of the iterator matches a …","Split the <code>Zip</code> evenly in two.","Return the inner value","Return true if it is <code>Done</code>, false if <code>Continue</code>","Return axis","Return length","Return stride","Return the index of the axis.","For fixed-size dimension representations (e.g. <code>Ix2</code>), this …","Compute the size of the dimension (number of elements)","Compute the size while checking for overflow.","Borrow as a read-only array view.","Borrow as a read-write array view.","Convert the dimensional into a dynamic dimensional …","Create a new dimension value with <code>n</code> axes, all zeros","Create a new dimension value with <code>n</code> axes, all zeros","Create a one-dimensional array from a vector (no copying …","Create a one-dimensional array from an iterator or …","Create a one-dimensional array with <code>n</code> evenly spaced …","Create a one-dimensional array with elements from <code>start</code> …","Create a one-dimensional array with <code>n</code> logarithmically …","Create a one-dimensional array with <code>n</code> geometrically …","Create an identity matrix of size <code>n</code> (square 2D array).","Create a 2D matrix from its diagonal","Create an array with copies of <code>elem</code>, shape <code>shape</code>.","Create an array with zeros, shape <code>shape</code>.","Create an array with ones, shape <code>shape</code>.","Create an array with default values, shape <code>shape</code>","Create an array with values created by the function <code>f</code>.","Create an array with values created by the function <code>f</code>.","Create an array with the given shape from a vector. (No …","Creates an array from a vector and interpret it according …","Create an array with uninitalized elements, shape <code>shape</code>.","Create an array with uninitalized elements, shape <code>shape</code>.","Create an array with uninitalized elements, shape <code>shape</code>.","Return the total number of elements in the array.","Return the length of <code>axis</code>.","Return whether the array has any elements","Return the number of dimensions (axes) in the array","Return the shape of the array in its “pattern” form, …","Return the shape of the array as it’s stored in the …","Return the shape of the array as a slice.","Return the strides of the array as a slice.","Return the stride of <code>axis</code>.","Return a read-only view of the array","Return a read-write view of the array","Return a shared view of the array with elements as if …","Return an uniquely owned copy of the array.","Return a shared ownership (copy on write) array, cloning …","Turn the array into a uniquely owned array, cloning the …","Turn the array into a shared ownership (copy on write) …","Returns a reference to the first element of the array, or …","Returns a mutable reference to the first element of the …","Return an iterator of references to the elements of the …","Return an iterator of mutable references to the elements …","Return an iterator of indexes and references to the …","Return an iterator of indexes and mutable references to …","Return a sliced view of the array.","Return a sliced read-write view of the array.","Return multiple disjoint, sliced, mutable views of the …","Slice the array, possibly changing the number of …","Slice the array in place without changing the number of …","Return a view of the array, sliced along the specified …","Return a mutable view of the array, sliced along the …","Slice the array in place along the specified axis.","Return a view of a slice of the array, with a closure …","Return a mutable view of a slice of the array, with a …","Slice the array in place, with a closure specifying the …","Return a reference to the element at <code>index</code>, or return <code>None</code>…","Return a mutable reference to the element at <code>index</code>, or …","Perform <em>unchecked</em> array indexing.","Perform <em>unchecked</em> array indexing.","Swap elements at indices <code>index1</code> and <code>index2</code>.","Swap elements <em>unchecked</em> at indices <code>index1</code> and <code>index2</code>.","Returns a view restricted to <code>index</code> along the axis, with …","Returns a mutable view restricted to <code>index</code> along the …","Collapses the array to <code>index</code> along the axis and removes …","Selects <code>index</code> along the axis, collapsing the axis into …","Along <code>axis</code>, select arbitrary subviews corresponding to …","Return a producer and iterable that traverses over the <em>…","","Return a producer and iterable that traverses over the <em>…","","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over all 1D …","Return a producer and iterable that traverses over all 1D …","Return an iterator that traverses over the outermost …","Return an iterator that traverses over the outermost …","Return an iterator that traverses over <code>axis</code> and yields …","Return an iterator that traverses over <code>axis</code> and yields …","Return an iterator that traverses over <code>axis</code> by chunks of …","Return an iterator that traverses over <code>axis</code> by chunks of …","Return an exact chunks producer (and iterable).","Return an exact chunks producer (and iterable).","Return a window producer and iterable.","Return a view of the diagonal elements of the array.","Return a read-write view over the diagonal elements of …","Return the diagonal as a one-dimensional array.","Return <code>true</code> if the array data is laid out in contiguous …","Return a standard-layout array containing the data, …","Return a pointer to the first element in the array.","Return a mutable pointer to the first element in the …","Return a raw view of the array.","Return a raw mutable view of the array.","Return the array’s data as a slice, if it is contiguous …","Return the array’s data as a slice, if it is contiguous …","Return the array’s data as a slice if it is contiguous, …","Return the array’s data as a slice if it is contiguous, …","Transform the array into <code>shape</code>; any shape with the same …","<em>Note: Reshape is for <code>ArcArray</code> only. Use <code>.into_shape()</code> for …","Convert any array or array view to a dynamic dimensional …","Convert an array or array view to another with the same …","Act like a larger size and/or shape array by <em>broadcasting</em> …","Swap axes <code>ax</code> and <code>bx</code>.","Permute the axes.","Transpose the array by reversing axes.","Return a transposed view of the array.","Return an iterator over the length and stride of each …","Return the axis with the greatest stride (by absolute …","Reverse the stride of <code>axis</code>.","If possible, merge in the axis <code>take</code> to <code>into</code>.","Insert new array axis at <code>axis</code> and return the result.","Remove array axis <code>axis</code> and return the result.","Perform an elementwise assigment to <code>self</code> from <code>rhs</code>.","Perform an elementwise assigment of values cloned from …","Perform an elementwise assigment to <code>self</code> from element <code>x</code>.","Traverse two arrays in unspecified order, in lock step, …","Traverse the array elements and apply a fold, returning …","Call <code>f</code> by reference on each element and create a new array…","Call <code>f</code> on a mutable reference of each element and create …","Call <code>f</code> by <strong>v</strong>alue on each element and create a new array …","Call <code>f</code> by <strong>v</strong>alue on each element, update the array with …","Modify the array in place by calling <code>f</code> by mutable …","Modify the array in place by calling <code>f</code> by <strong>v</strong>alue on each …","Call <code>f</code> for each element in the array.","Visit each element in the array by calling <code>f</code> by reference …","Fold along an axis.","Reduce the values along an axis into just one value, …","Reduce the values along an axis into just one value, …","Iterates over pairs of consecutive elements along the …","Returns the single element in the array without cloning …","Returns the single element in the array without cloning …","Return a vector of the elements in the array, in the way …","Return a vector of the elements in the array, in the way …","<strong>Promise</strong> that the array’s elements are all fully …","Return an vector with the elements of the one-dimensional …","Return an array view of row <code>index</code>.","Return a mutable array view of row <code>index</code>.","Return the number of rows (length of <code>Axis(0)</code>) in the …","Return an array view of column <code>index</code>.","Return a mutable array view of column <code>index</code>.","Return the number of columns (length of <code>Axis(1)</code>) in the …","Return true if the array is square, false otherwise.","Insert new array axis of length 1 at <code>axis</code>, modifying the …","Collapses the array to <code>index</code> along the axis and removes …","Return the sum of all elements in the array.","Return the sum of all elements in the array.","Returns the arithmetic mean x̅ of all elements in the …","Return the product of all elements in the array.","Return variance of elements in the array.","Return standard deviation of elements in the array.","Return sum along <code>axis</code>.","Return mean along <code>axis</code>.","Return variance along <code>axis</code>.","Return standard deviation along <code>axis</code>.","Perform dot product or matrix multiplication of arrays …","Perform matrix multiplication of rectangular arrays <code>self</code> …","Perform the operation <code>self += alpha * rhs</code> efficiently, …","Create a read-only array view borrowing its data from a …","Create an <code>ArrayView<A, D></code> from shape information and a …","Create a read-only array view borrowing its data from a …","Create an <code>ArrayView<A, D></code> from shape information and a …","Create a read-write array view borrowing its data from a …","Create an <code>ArrayViewMut<A, D></code> from shape information and a …","Convert the view into an <code>ArrayViewMut<\'b, A, D></code> where <code>\'b</code> …","Create a read-write array view borrowing its data from a …","Create an <code>ArrayViewMut<A, D></code> from shape information and a …","Convert the view into an <code>ArrayViewMut<\'b, A, D></code> where <code>\'b</code> …","Convert the view into an <code>ArrayView<\'b, A, D></code> where <code>\'b</code> is …","Return the array’s data as a slice, if it is contiguous …","Convert the view into an <code>ArrayView<\'b, A, D></code> where <code>\'b</code> is …","Return the array’s data as a slice, if it is contiguous …","Consume the view and return a reference to the single …","Consume the view and return a reference to the single …","Consume the mutable view and return a mutable reference …","Consume the mutable view and return a mutable reference …","Return the array’s data as a slice, if it is contiguous …","Return a shared view of the array with elements as if …","Return the array’s data as a slice, if it is contiguous …","Return a shared view of the array with elements as if …","Split the array view along <code>axis</code> and return one view …","Split the array view along <code>axis</code> and return one view …","Split the array view along <code>axis</code> and return one mutable …","Split the view into multiple disjoint slices.","Split the array view along <code>axis</code> and return one mutable …","Split the view into multiple disjoint slices.","Create an <code>RawArrayView<A, D></code> from shape information and a …","Converts to a read-only view of the array.","Split the array view along <code>axis</code> and return one array …","Cast the raw pointer of the raw array view to a different …","Create an <code>RawArrayView<A, D></code> from shape information and a …","Converts to a read-only view of the array.","Split the array view along <code>axis</code> and return one array …","Cast the raw pointer of the raw array view to a different …","Create an <code>RawArrayViewMut<A, D></code> from shape information …","Converts to a read-only view of the array.","Converts to a mutable view of the array.","Split the array view along <code>axis</code> and return one array …","Cast the raw pointer of the raw array view to a different …","Create an <code>RawArrayViewMut<A, D></code> from shape information …","Converts to a read-only view of the array.","Converts to a mutable view of the array.","Split the array view along <code>axis</code> and return one array …","Cast the raw pointer of the raw array view to a different …","Returns <code>true</code> iff the array is the view (borrowed) variant.","Returns <code>true</code> iff the array is the owned variant.","Returns <code>true</code> iff the array is the view (borrowed) variant.","Returns <code>true</code> iff the array is the owned variant."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,5,5,0,0,0,6,0,7,7,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,9,0,10,0,11,0,12,0,0,0,13,13,13,13,13,13,0,0,0,0,14,14,14,0,0,15,15,15,0,16,16,16,16,0,0,17,18,18,18,17,17,0,0,0,0,0,0,0,0,19,19,19,19,0,0,20,20,20,20,20,20,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,23,23,0,0,0,24,24,0,0,0,0,0,0,0,0,0,25,25,25,0,0,0,0,0,26,26,0,27,27,27,27,0,28,28,28,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,29,29,29,0,0,0,0,0,0,0,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,13,13,13,13,13,13,13,13,13,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,15,15,15,15,15,15,15,15,15,51,51,51,51,51,51,51,51,51,17,17,17,17,17,17,17,17,17,17,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,26,26,26,26,26,26,26,26,26,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,29,29,29,29,29,29,29,58,58,57,30,59,59,29,58,58,57,57,30,30,59,59,29,29,58,58,57,30,30,59,29,57,57,30,59,59,29,30,30,57,57,30,57,58,58,59,59,49,49,49,49,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,32,1,2,60,61,62,63,64,55,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,65,65,65,65,65,65,65,65,65,64,64,64,64,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,56,56,56,56,61,61,61,30,52,56,60,60,61,61,66,67,49,50,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,15,17,17,17,17,17,17,52,55,55,68,68,40,40,40,41,41,41,1,2,3,4,31,40,38,41,39,43,44,1,2,60,61,32,34,37,42,45,46,33,33,33,35,35,36,36,40,40,40,40,40,40,40,40,40,40,40,40,38,38,41,41,41,41,41,41,41,41,41,41,41,41,39,39,43,43,44,44,1,1,2,2,3,3,4,4,31,31,31,30,30,47,13,33,32,34,35,42,46,40,38,43,1,3,48,49,50,15,51,17,52,53,26,7,31,6,54,55,57,58,59,56,56,56,48,54,55,48,6,56,56,13,47,48,15,15,17,17,6,6,54,54,54,55,55,48,48,48,48,48,6,48,52,55,48,55,56,30,13,47,32,1,48,49,50,15,51,17,52,53,26,31,7,6,54,55,57,56,47,17,56,56,56,56,56,56,56,56,54,54,56,56,56,54,54,56,56,56,54,54,56,56,56,56,54,54,54,56,56,54,54,54,56,56,54,54,54,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,54,54,54,54,54,54,54,54,55,56,54,54,54,54,54,54,54,54,55,56,15,17,6,54,55,52,52,52,52,52,52,52,52,52,52,52,56,56,56,54,54,54,54,54,54,54,54,54,54,54,54,54,54,47,47,48,48,48,49,15,15,17,17,17,52,52,52,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,26,26,7,7,7,6,8,8,8,8,8,8,54,65,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,69,56,69,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,60,60,56,56,56,61,61,61,56,56,60,60,56,60,56,61,56,56,61,61,56,60,56,56,61,61,56,56,56,56,62,62,62,62,56,56,56,56,56,63,63,63,63,63,56,56,68,68],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[["arraybase",3],["arraybase",3],["arraybase",3]]],[[["arraybase",3],["arraybase",3],["arraybase",3]]],null,null,[[]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,[[],["usize",15]],[[]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],[["arrayview1",6],["ix",6]]],[[],[["arrayviewmut1",6],["ix",6]]],[[["usize",15]]],[[],["ixdyn",6]],[[],["privatemarker",3]],null,null,[[]],null,[[["axis",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["indices",3]],[[["arraybase",3]],["indices",3]],null,null,[[["arrayviewmut",6]]],[[],["privatemarker",3]],null,null,null,null,null,null,null,[[],["usize",15]],[[],["usize",15]],[[],["privatemarker",3]],null,null,null,null,null,null,null,null,null,null,null,[[["axis",3]],[["array",6],["result",4],["shapeerror",3]]],[[["axis",3]],[["shapeerror",3],["array",6],["result",4]]],[[["axis",3]],[["shapeerror",3],["array",6],["result",4]]],null,null,null,[[]],[[],["option",4]],[[]],null,null,null,null,[[],["shape",3]],[[],["shape",3]],[[["bool",15]],["shape",3]],[[],["strideshape",3]],null,null,[[]],[[],["ix0",6]],[[["ix",6]],["ix1",6]],[[["ix",6]],["ix2",6]],[[["ix",6]],["ix3",6]],[[["ix",6]],["ix4",6]],[[["ix",6]],["ix5",6]],[[["ix",6]],["ix6",6]],[[],["ixdyn",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["privatemarker",3]],null,null,null,null,[[]],[[],["array0",6]],[[],[["clone",8],["array1",6]]],[[],[["arcarray1",6],["clone",8]]],[[],["arrayview0",6]],[[],["arrayview1",6]],[[],["arrayview2",6]],[[],["arrayviewmut1",6]],[[],["arrayviewmut2",6]],null,null,[[]],[[],["usize",15]],[[],[["clone",8],["array2",6]]],[[],[["arcarray2",6],["clone",8]]],[[],[["array3",6],["clone",8]]],[[],[["clone",8],["arcarray",6],["ix3",6]]],null,null,null,null,null,null,null,[[]],null,null,null,[[]],[[],["privatemarker",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["arraybase",3]]],[[],[["bool",15],["option",4]]],[[["arraybase",3]]],[[],[["bool",15],["option",4]]],[[["arraybase",3]]],[[],[["bool",15],["option",4]]],[[["arraybase",3]]],[[],[["bool",15],["option",4]]],[[["arraybase",3]]],[[],[["bool",15],["option",4]]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]],["nonnull",3]],[[["nonnull",3]]],[[["nonnull",3]]],[[["arraybase",3]],[["arraybase",3],["ownedrepr",3]]],[[["arraybase",3]],[["ownedarcrepr",3],["arraybase",3]]],[[["arraybase",3]],[["arraybase",3],["ownedrepr",3]]],[[["arraybase",3]],[["arraybase",3],["ownedrepr",3]]],[[["arraybase",3]],[["arraybase",3],["ownedrepr",3]]],[[["cowrepr",4],["arraybase",3]],[["arraybase",3],["ownedrepr",3]]],[[["vec",3]]],[[],["ownedarcrepr",3]],[[["vec",3]]],[[],["ownedarcrepr",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["shape",3]],[[]],[[["bool",15]]],[[],["strideshape",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["isize",15]],[[],["isize",15]],[[]],[[]],[[]],[[]],[[],["ix1",6]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["option",4]],[[["axis",3]]],[[["axis",3]]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[]],[[]],[[],["axis",3]],[[],["axis",3]],[[],["option",4]],[[],["isize",15]],[[],[["isize",15],["option",4]]],[[["axis",3]]],[[["axis",3]]],[[],["option",4]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],["usize",15]],[[["usize",15]]],[[]],[[]],[[]],[[],["axis",3]],[[],["option",4]],[[],["isize",15]],[[],[["isize",15],["option",4]]],[[["axis",3]]],[[["axis",3]]],[[],["usize",15]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[],["option",4]],[[],["isize",15]],[[],[["isize",15],["option",4]]],[[]],[[["axis",3]]],[[["axis",3]]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]]],[[["axis",3]]],[[["axis",3]]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]]],[[["axis",3]]],[[["axis",3]]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]]],[[["axis",3]]],[[["axis",3]]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]]],[[["axis",3]]],[[["axis",3]]],[[],["option",4]],[[],["ixdyn",6]],[[["ix1",6]],[["isize",15],["option",4]]],[[["ix1",6]],["isize",15]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],["isize",15]],[[["axis",3]]],[[["axis",3]],["ix0",6]],[[["axis",3]],["ix1",6]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["arraybase",3]]],[[["arraybase",3]],[["ix1",6],["array",6]]],[[["arraybase",3]],["array2",6]],[[["arraybase",3]],[["ix1",6],["array",6]]],[[]],[[],["option",4]],[[]],[[]],[[]],[[["vec",3]]],[[]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[["vec",3]]],[[["vec",3]]],[[],["shape",3]],[[]],[[["range",3],["isize",15]],["slice",3]],[[["isize",15],["rangeinclusive",3]],["slice",3]],[[["isize",15],["rangefrom",3]],["slice",3]],[[["rangeto",3],["isize",15]],["slice",3]],[[["rangetoinclusive",3],["isize",15]],["slice",3]],[[["range",3],["usize",15]],["slice",3]],[[["usize",15],["rangeinclusive",3]],["slice",3]],[[["usize",15],["rangefrom",3]],["slice",3]],[[["usize",15],["rangeto",3]],["slice",3]],[[["usize",15],["rangetoinclusive",3]],["slice",3]],[[["range",3],["i32",15]],["slice",3]],[[["rangeinclusive",3],["i32",15]],["slice",3]],[[["rangefrom",3],["i32",15]],["slice",3]],[[["rangeto",3],["i32",15]],["slice",3]],[[["rangetoinclusive",3],["i32",15]],["slice",3]],[[["range",3],["isize",15]],["sliceinfoelem",4]],[[["isize",15],["rangeinclusive",3]],["sliceinfoelem",4]],[[["isize",15],["rangefrom",3]],["sliceinfoelem",4]],[[["rangeto",3],["isize",15]],["sliceinfoelem",4]],[[["rangetoinclusive",3],["isize",15]],["sliceinfoelem",4]],[[["range",3],["usize",15]],["sliceinfoelem",4]],[[["usize",15],["rangeinclusive",3]],["sliceinfoelem",4]],[[["usize",15],["rangefrom",3]],["sliceinfoelem",4]],[[["usize",15],["rangeto",3]],["sliceinfoelem",4]],[[["usize",15],["rangetoinclusive",3]],["sliceinfoelem",4]],[[["range",3],["i32",15]],["sliceinfoelem",4]],[[["rangeinclusive",3],["i32",15]],["sliceinfoelem",4]],[[["rangefrom",3],["i32",15]],["sliceinfoelem",4]],[[["rangeto",3],["i32",15]],["sliceinfoelem",4]],[[["rangetoinclusive",3],["i32",15]],["sliceinfoelem",4]],[[["rangefull",3]],["slice",3]],[[["rangefull",3]],["sliceinfoelem",4]],[[["slice",3]],["sliceinfoelem",4]],[[["isize",15]],["sliceinfoelem",4]],[[["usize",15]],["sliceinfoelem",4]],[[["i32",15]],["sliceinfoelem",4]],[[["newaxis",3]],["sliceinfoelem",4]],[[["sliceinfo",3]],["sliceinfo",3]],[[]],[[["ix",6],["vec",3]]],[[["arrayview",6]],["cowarray",6]],[[["array",6]],["cowarray",6]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[["usize",15]],["option",4]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["option",4]],[[],[["usize",15],["option",4]]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[["usize",15]],["option",4]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["option",4]],[[],[["usize",15],["option",4]]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["shapeerror",3]],[[],["errorkind",4]],[[],["indicesiter",3]],[[],["indices",3]],[[]],[[]],[[]],[[]],[[]],[[],["indexediter",3]],[[]],[[]],[[]],[[]],[[],["shape",3]],[[],["strideshape",3]],[[],["slice",3]],[[],["newaxis",3]],[[]],[[]],[[],["zip",3]],[[],["foldwhile",4]],[[]],[[]],[[],["axis",3]],[[],["dim",3]],[[],["ixdynimpl",3]],[[]],[[],["rawviewrepr",3]],[[],["viewrepr",3]],[[],["arraybase",3]],[[]],[[]],[[],["mathcell",3]],[[],["dim",3]],[[],["ixdynimpl",3]],[[],["ordering",4]],[[["axis",3]],["ordering",4]],[[["arraybase",3]],["bool",15]],[[["arraybase",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["slice",3]],["bool",15]],[[["slice",3]],["bool",15]],[[["sliceinfoelem",4]],["bool",15]],[[["sliceinfoelem",4]],["bool",15]],[[["axis",3]],["bool",15]],[[["axis",3]],["bool",15]],[[["dim",3]],["bool",15]],[[["dim",3]],["bool",15]],[[],["bool",15]],[[["ixdynimpl",3]],["bool",15]],[[["ixdynimpl",3]],["bool",15]],[[],[["option",4],["ordering",4]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["axis",3]],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[]],[[["ix",6]]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[]],[[["ix",6]]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[]],[[["ix",6]]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[]],[[]],[[]],[[["ix",6]]],[[["arraybase",3]]],[[]],[[]],[[]],[[["ix",6]]],[[["arraybase",3]]],[[]],[[]],[[]],[[["ix",6]]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[]],[[]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["sliceinfo",3],["shapeerror",3],["result",4]]],[[["vec",3],["sliceinfoelem",4]],[["result",4],["sliceinfo",3],["shapeerror",3]]],[[],[["shapeerror",3],["result",4],["sliceinfo",3]]],[[],[["sliceinfo",3],["shapeerror",3],["result",4]]],[[],[["result",4],["shapeerror",3],["sliceinfo",3]]],[[],[["sliceinfo",3],["result",4],["shapeerror",3]]],[[],[["result",4],["sliceinfo",3],["shapeerror",3]]],[[],[["shapeerror",3],["result",4],["sliceinfo",3]]],[[],[["sliceinfo",3],["shapeerror",3],["result",4]]],[[],[["sliceinfo",3],["shapeerror",3],["result",4]]],[[],[["sliceinfo",3],["result",4],["shapeerror",3]]],[[],[["ix1",6],["arraybase",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["errorkind",4]],[[["errorkind",4]]],[[]],[[]],[[]],[[],["usize",15]],[[["isize",15],["option",4]],["slice",3]],[[["isize",15]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["result",4],["sliceinfo",3],["shapeerror",3]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[],["foldwhile",4]],[[],["bool",15]],[[],["zip",3]],[[],["zip",3]],[[],["array",6]],[[],["array",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["foldwhile",4]],[[],["bool",15]],[[],["zip",3]],[[],["zip",3]],[[],["array",6]],[[],["array",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["foldwhile",4]],[[],["bool",15]],[[],["zip",3]],[[],["zip",3]],[[],["array",6]],[[],["array",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["foldwhile",4]],[[],["bool",15]],[[],["zip",3]],[[],["zip",3]],[[],["array",6]],[[],["array",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["foldwhile",4]],[[],["bool",15]],[[],["zip",3]],[[],["zip",3]],[[],["array",6]],[[],["array",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["foldwhile",4]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["axis",3]],[[],["ix",6]],[[],["ixs",6]],[[],["usize",15]],null,[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],[["arrayview1",6],["ix",6]]],[[],[["arrayviewmut1",6],["ix",6]]],[[],["ixdyn",6]],[[["usize",15]],["ixdyn",6]],[[["usize",15]],["ixdyn",6]],[[["vec",3]]],[[["intoiterator",8]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]],["option",4]],[[["ix",6]]],[[["arraybase",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]],[["shapeerror",3],["result",4]]],[[["vec",3]]],[[],["arraybase",3]],[[]],[[]],[[],["usize",15]],[[["axis",3]],["usize",15]],[[],["bool",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["axis",3]],["isize",15]],[[],["arrayview",6]],[[],["arrayviewmut",6]],[[],[["arrayview",6],["mathcell",3]]],[[],["array",6]],[[],["arcarray",6]],[[],["array",6]],[[],["arcarray",6]],[[],["option",4]],[[],["option",4]],[[],["iter",3]],[[],["itermut",3]],[[],["indexediter",3]],[[],["indexeditermut",3]],[[],["arrayview",6]],[[],["arrayviewmut",6]],[[]],[[],["arraybase",3]],[[]],[[["axis",3],["slice",3]],["arrayview",6]],[[["axis",3],["slice",3]],["arrayviewmut",6]],[[["axis",3],["slice",3]]],[[],["arrayview",6]],[[],["arrayviewmut",6]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[["usize",15],["axis",3]],["arrayview",6]],[[["usize",15],["axis",3]],["arrayviewmut",6]],[[["usize",15],["axis",3]],["arraybase",3]],[[["usize",15],["axis",3]]],[[["axis",3]],["array",6]],[[],["lanes",3]],[[],["lanes",3]],[[],["lanesmut",3]],[[],["lanesmut",3]],[[],["lanes",3]],[[],["lanes",3]],[[],["lanesmut",3]],[[],["lanesmut",3]],[[["axis",3]],["lanes",3]],[[["axis",3]],["lanesmut",3]],[[],["axisiter",3]],[[],["axisitermut",3]],[[["axis",3]],["axisiter",3]],[[["axis",3]],["axisitermut",3]],[[["usize",15],["axis",3]],["axischunksiter",3]],[[["usize",15],["axis",3]],["axischunksitermut",3]],[[],["exactchunks",3]],[[],["exactchunksmut",3]],[[],["windows",3]],[[],["arrayview1",6]],[[],["arrayviewmut1",6]],[[],[["ix1",6],["arraybase",3]]],[[],["bool",15]],[[],["cowarray",6]],[[]],[[]],[[],["rawarrayview",6]],[[],["rawarrayviewmut",6]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["result",4],["arraybase",3],["shapeerror",3]]],[[],["arraybase",3]],[[],[["arraybase",3],["ixdyn",6]]],[[],[["arraybase",3],["shapeerror",3],["result",4]]],[[],[["option",4],["arrayview",6]]],[[["usize",15]]],[[],["arraybase",3]],[[],["arraybase",3]],[[],["arrayview",6]],[[],["axes",3]],[[],["axis",3]],[[["axis",3]]],[[["axis",3]],["bool",15]],[[["axis",3]],["arraybase",3]],[[["axis",3]],["arraybase",3]],[[["arraybase",3]]],[[]],[[]],[[["arraybase",3]]],[[]],[[],["array",6]],[[],["array",6]],[[],["array",6]],[[]],[[]],[[]],[[]],[[]],[[["axis",3]],["array",6]],[[["axis",3]],["array",6]],[[["axis",3]],["array",6]],[[["axis",3]]],[[]],[[]],[[],["vec",3]],[[],["vec",3]],[[],["arraybase",3]],[[],["vec",3]],[[["ix",6]],["arrayview1",6]],[[["ix",6]],["arrayviewmut1",6]],[[],["usize",15]],[[["ix",6]],["arrayview1",6]],[[["ix",6]],["arrayviewmut1",6]],[[],["usize",15]],[[],["bool",15]],[[["axis",3]]],[[["usize",15],["axis",3]]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[["axis",3]],["array",6]],[[["axis",3]],[["option",4],["array",6]]],[[["axis",3]],["array",6]],[[["axis",3]],["array",6]],[[]],[[]],[[["arraybase",3]]],[[],[["shapeerror",3],["result",4]]],[[]],[[],[["shapeerror",3],["result",4]]],[[]],[[],[["shapeerror",3],["result",4]]],[[]],[[],["arrayviewmut",6]],[[],[["shapeerror",3],["result",4]]],[[]],[[],["arrayviewmut",6]],[[],["arrayview",6]],[[],["option",4]],[[],["arrayview",6]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],[["mathcell",3],["arrayview",6]]],[[],["option",4]],[[],[["mathcell",3],["arrayview",6]]],[[["axis",3],["ix",6]]],[[["axis",3],["ix",6]]],[[["axis",3],["ix",6]]],[[]],[[["axis",3],["ix",6]]],[[]],[[]],[[],["arrayview",6]],[[["axis",3],["ix",6]]],[[],["rawarrayview",6]],[[]],[[],["arrayview",6]],[[["axis",3],["ix",6]]],[[],["rawarrayview",6]],[[]],[[],["arrayview",6]],[[],["arrayviewmut",6]],[[["axis",3],["ix",6]]],[[],["rawarrayviewmut",6]],[[]],[[],["arrayview",6]],[[],["arrayviewmut",6]],[[["axis",3],["ix",6]]],[[],["rawarrayviewmut",6]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]]],"p":[[3,"AxisIter"],[3,"AxisIterMut"],[3,"AxisChunksIter"],[3,"AxisChunksIterMut"],[8,"Dot"],[3,"Axis"],[3,"AxisDescription"],[8,"Dimension"],[8,"IntoDimension"],[8,"RemoveAxis"],[8,"DimAdd"],[8,"DimMax"],[4,"ErrorKind"],[8,"MultiSliceArg"],[3,"Slice"],[8,"SliceArg"],[4,"SliceInfoElem"],[13,"Slice"],[8,"IndexLonger"],[8,"ShapeBuilder"],[8,"AssignElem"],[8,"DataOwned"],[8,"RawData"],[8,"RawDataSubst"],[8,"FixedInitializer"],[4,"FoldWhile"],[8,"IntoNdProducer"],[8,"NdProducer"],[4,"CowRepr"],[3,"OwnedRepr"],[3,"Axes"],[3,"Indices"],[3,"IndicesIter"],[3,"ExactChunks"],[3,"ExactChunksIter"],[3,"ExactChunksIterMut"],[3,"ExactChunksMut"],[3,"IndexedIter"],[3,"IndexedIterMut"],[3,"Iter"],[3,"IterMut"],[3,"Lanes"],[3,"LanesIter"],[3,"LanesIterMut"],[3,"LanesMut"],[3,"Windows"],[3,"ShapeError"],[3,"MathCell"],[3,"Shape"],[3,"StrideShape"],[3,"NewAxis"],[3,"SliceInfo"],[3,"Zip"],[3,"Dim"],[3,"IxDynImpl"],[3,"ArrayBase"],[3,"OwnedArcRepr"],[3,"RawViewRepr"],[3,"ViewRepr"],[6,"ArrayView"],[6,"ArrayViewMut"],[6,"RawArrayView"],[6,"RawArrayViewMut"],[6,"Ix"],[6,"IxDyn"],[6,"Array2"],[6,"Array3"],[6,"CowArray"],[6,"Array"]]},\
"ndarray_rand":{"doc":"Constructors for randomized arrays: <code>rand</code> integration for …","t":[0,0,0,3,8,16,8,16,10,10,10,11,11,8,10,8,10,10,3,3,3,3,0,0,3,8,3,4,13,13,13,13,8,10,11,3,3,3,4,13,3,3,3,3,4,13,13,13,13,3,0,8,10,11,3,3,3,8,11,11,11,11,8,16,10,10,10,10,10,10,10,10,5,5,8,8,11,11,11,11,11,11,11,11,8,10,10,10,10,8,16,10,11,11,11,0,0,3,3,3,0,3,3,3,3,3,0,0,4,4,4,5,5,8,16,10,10,10,10,10,10,10,10,8,11,11,11,11,3,5,8,3,8,10,10,10,10,8,16,10,11,11,11,5,8,10,8,11,11,11,11,11,11,11,11,0,0,3,8,18,18,10,11,0,3,8,16,8,16,10,10,10,11,11,8,10,8,10,10,3,3,3,3,3,3,4,13,3,8,10,11,3,3,3,3,3,4,13,13,3,4,13,3,4,13,13,13,4,13,3,3,3,4,13,13,3,4,13,4,13,13,13,3,4,13,13,3,3,4,13,3,3,4,13,13,13,3,3,4,13,13,4,13,13,3,3,3,3,4,13,13,4,13,13,3,3,4,13,13,13,4,13,3,3,4,13,13,3,3,3,3,4,13,13,3,4,13,13,13,13,3,3,0,8,10,10,0,8,11,11,11,11,10,11,11,11,11,11,10,11,11,11,8,11,11,11,11,10,11,11,11,11,11,10,11,11,11,5,8,10,8,10,0,8,10,10,10,10,10,10,10,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,8,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,0,8,10,11,10,8,10,11,11,5,5,0,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,0,8,16,10,0,8,16,10,8,10,0,8,10,8,10,8,10,0,8,10,10,8,10,8,10,8,10,0,8,10,8,10,8,10,8,10,8,10,8,10,0,8,16,10,5,5,0,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,8,10,10,10,10,10,5,5,5,8,8,16,10,8,8,8,8,8,8,4,13,13,3,12,5,5,5,8,10,10,8,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,5,8,10,8,11,11,11,11,10,11,11,11,11,11,10,11,11,11,8,10,8,11,11,11,11,10,11,11,11,11,11,10,11,11,11,5,5,8,10,11,11,8,10,11,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,16,10,8,16,10,8,10,8,10,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,5,5,8,16,10,5,5,5,8,10,10,10,10,10,8,8,10,10,10,10,4,13,13,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["rand","distributions","uniform","Uniform","SampleUniform","Sampler","UniformSampler","X","new","new_inclusive","sample","sample_single","sample_single_inclusive","SampleBorrow","borrow","SampleRange","sample_single","is_empty","UniformInt","UniformChar","UniformFloat","UniformDuration","weighted","alias_method","WeightedIndex","Weight","WeightedIndex","WeightedError","NoItem","InvalidWeight","AllWeightsZero","TooMany","Distribution","sample","sample_iter","DistIter","Standard","Bernoulli","BernoulliError","InvalidProbability","Open01","OpenClosed01","Alphanumeric","Uniform","WeightedError","NoItem","InvalidWeight","AllWeightsZero","TooMany","WeightedIndex","prelude","Distribution","sample","sample_iter","SmallRng","StdRng","ThreadRng","IteratorRandom","choose","choose_stable","choose_multiple_fill","choose_multiple","SliceRandom","Item","choose","choose_mut","choose_multiple","choose_weighted","choose_weighted_mut","choose_multiple_weighted","shuffle","partial_shuffle","random","thread_rng","CryptoRng","Rng","gen","gen_range","sample","sample_iter","fill","try_fill","gen_bool","gen_ratio","RngCore","next_u32","next_u64","fill_bytes","try_fill_bytes","SeedableRng","Seed","from_seed","seed_from_u64","from_rng","from_entropy","rngs","adapter","ReadError","ReadRng","ReseedingRng","mock","StepRng","SmallRng","StdRng","ThreadRng","OsRng","seq","index","IndexVec","IndexVecIter","IndexVecIntoIter","sample","sample_weighted","SliceRandom","Item","choose","choose_mut","choose_multiple","choose_weighted","choose_weighted_mut","choose_multiple_weighted","shuffle","partial_shuffle","IteratorRandom","choose","choose_stable","choose_multiple_fill","choose_multiple","SliceChooseIter","random","CryptoRng","Error","RngCore","next_u32","next_u64","fill_bytes","try_fill_bytes","SeedableRng","Seed","from_seed","seed_from_u64","from_rng","from_entropy","thread_rng","Fill","try_fill","Rng","gen","gen_range","sample","sample_iter","fill","try_fill","gen_bool","gen_ratio","rand_distr","weighted_alias","WeightedAliasIndex","AliasableWeight","MAX","ZERO","try_from_u32_lossy","sum","uniform","Uniform","SampleUniform","Sampler","UniformSampler","X","new","new_inclusive","sample","sample_single","sample_single_inclusive","SampleBorrow","borrow","SampleRange","sample_single","is_empty","UniformInt","UniformChar","UniformFloat","UniformDuration","Alphanumeric","Bernoulli","BernoulliError","InvalidProbability","DistIter","Distribution","sample","sample_iter","Open01","OpenClosed01","Standard","Uniform","Binomial","BinomialError","ProbabilityTooSmall","ProbabilityTooLarge","Cauchy","CauchyError","ScaleTooSmall","Dirichlet","DirichletError","AlphaTooShort","AlphaTooSmall","SizeTooSmall","ExpError","LambdaTooSmall","Exp","Exp1","Beta","BetaError","AlphaTooSmall","BetaTooSmall","ChiSquared","ChiSquaredError","DoFTooSmall","GammaError","ShapeTooSmall","ScaleTooSmall","ScaleTooLarge","FisherF","FisherFError","MTooSmall","NTooSmall","Gamma","StudentT","GeoError","InvalidProbability","Geometric","StandardGeometric","HyperGeoError","PopulationTooLarge","ProbabilityTooLarge","SampleSizeTooLarge","Hypergeometric","InverseGaussian","InverseGaussianError","MeanNegativeOrNull","ShapeNegativeOrNull","NormalError","MeanTooSmall","BadVariance","LogNormal","Normal","StandardNormal","NormalInverseGaussian","NormalInverseGaussianError","AlphaNegativeOrNull","AbsoluteBetaNotLessThanAlpha","ParetoError","ScaleTooSmall","ShapeTooSmall","Pareto","Pert","PertError","RangeTooSmall","ModeRange","ShapeTooSmall","PoissonError","ShapeTooSmall","Poisson","Triangular","TriangularError","RangeTooSmall","ModeRange","UnitBall","UnitCircle","UnitDisc","UnitSphere","WeibullError","ScaleTooSmall","ShapeTooSmall","Weibull","WeightedError","NoItem","InvalidWeight","AllWeightsZero","TooMany","WeightedIndex","WeightedAliasIndex","bounds","Bounded","min_value","max_value","cast","ToPrimitive","to_isize","to_i8","to_i16","to_i32","to_i64","to_i128","to_usize","to_u8","to_u16","to_u32","to_u64","to_u128","to_f32","to_f64","FromPrimitive","from_isize","from_i8","from_i16","from_i32","from_i64","from_i128","from_usize","from_u8","from_u16","from_u32","from_u64","from_u128","from_f32","from_f64","cast","NumCast","from","AsPrimitive","as_","float","FloatCore","infinity","neg_infinity","nan","neg_zero","min_value","min_positive_value","epsilon","max_value","is_nan","is_infinite","is_finite","is_normal","classify","floor","ceil","round","trunc","fract","abs","signum","is_sign_positive","is_sign_negative","min","max","recip","powi","to_degrees","to_radians","integer_decode","Float","nan","infinity","neg_infinity","neg_zero","min_value","min_positive_value","epsilon","max_value","is_nan","is_infinite","is_finite","is_normal","classify","floor","ceil","round","trunc","fract","abs","signum","is_sign_positive","is_sign_negative","mul_add","recip","powi","powf","sqrt","exp","exp2","ln","log","log2","log10","to_degrees","to_radians","max","min","abs_sub","cbrt","hypot","sin","cos","tan","asin","acos","atan","atan2","sin_cos","exp_m1","ln_1p","sinh","cosh","tanh","asinh","acosh","atanh","integer_decode","FloatConst","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","LN_10","LN_2","LOG10_E","LOG2_E","PI","SQRT_2","TAU","LOG10_2","LOG2_10","identities","Zero","zero","set_zero","is_zero","One","one","set_one","is_one","zero","one","int","PrimInt","count_ones","count_zeros","leading_zeros","trailing_zeros","rotate_left","rotate_right","signed_shl","signed_shr","unsigned_shl","unsigned_shr","swap_bytes","from_be","from_le","to_be","to_le","pow","ops","checked","CheckedAdd","checked_add","CheckedSub","checked_sub","CheckedMul","checked_mul","CheckedDiv","checked_div","CheckedRem","checked_rem","CheckedNeg","checked_neg","CheckedShl","checked_shl","CheckedShr","checked_shr","inv","Inv","Output","inv","mul_add","MulAdd","Output","mul_add","MulAddAssign","mul_add_assign","overflowing","OverflowingAdd","overflowing_add","OverflowingSub","overflowing_sub","OverflowingMul","overflowing_mul","saturating","Saturating","saturating_add","saturating_sub","SaturatingAdd","saturating_add","SaturatingSub","saturating_sub","SaturatingMul","saturating_mul","wrapping","WrappingAdd","wrapping_add","WrappingSub","wrapping_sub","WrappingMul","wrapping_mul","WrappingNeg","wrapping_neg","WrappingShl","wrapping_shl","WrappingShr","wrapping_shr","pow","Pow","Output","pow","pow","checked_pow","real","Real","min_value","min_positive_value","epsilon","max_value","floor","ceil","round","trunc","fract","abs","signum","is_sign_positive","is_sign_negative","mul_add","recip","powi","powf","sqrt","exp","exp2","ln","log","log2","log10","to_degrees","to_radians","max","min","abs_sub","cbrt","hypot","sin","cos","tan","asin","acos","atan","atan2","sin_cos","exp_m1","ln_1p","sinh","cosh","tanh","asinh","acosh","atanh","sign","Signed","abs","abs_sub","signum","is_positive","is_negative","abs","abs_sub","signum","Unsigned","Num","FromStrRadixErr","from_str_radix","NumOps","NumRef","RefNum","NumAssignOps","NumAssign","NumAssignRef","FloatErrorKind","Empty","Invalid","ParseFloatError","kind","clamp","clamp_min","clamp_max","Bounded","min_value","max_value","Float","nan","infinity","neg_infinity","neg_zero","min_value","min_positive_value","epsilon","max_value","is_nan","is_infinite","is_finite","is_normal","classify","floor","ceil","round","trunc","fract","abs","signum","is_sign_positive","is_sign_negative","mul_add","recip","powi","powf","sqrt","exp","exp2","ln","log","log2","log10","to_degrees","to_radians","max","min","abs_sub","cbrt","hypot","sin","cos","tan","asin","acos","atan","atan2","sin_cos","exp_m1","ln_1p","sinh","cosh","tanh","asinh","acosh","atanh","integer_decode","FloatConst","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","LN_10","LN_2","LOG10_E","LOG2_E","PI","SQRT_2","TAU","LOG10_2","LOG2_10","cast","AsPrimitive","as_","FromPrimitive","from_isize","from_i8","from_i16","from_i32","from_i64","from_i128","from_usize","from_u8","from_u16","from_u32","from_u64","from_u128","from_f32","from_f64","NumCast","from","ToPrimitive","to_isize","to_i8","to_i16","to_i32","to_i64","to_i128","to_usize","to_u8","to_u16","to_u32","to_u64","to_u128","to_f32","to_f64","one","zero","One","one","set_one","is_one","Zero","zero","set_zero","is_zero","PrimInt","count_ones","count_zeros","leading_zeros","trailing_zeros","rotate_left","rotate_right","signed_shl","signed_shr","unsigned_shl","unsigned_shr","swap_bytes","from_be","from_le","to_be","to_le","pow","CheckedAdd","checked_add","CheckedDiv","checked_div","CheckedMul","checked_mul","CheckedNeg","checked_neg","CheckedRem","checked_rem","CheckedShl","checked_shl","CheckedShr","checked_shr","CheckedSub","checked_sub","Inv","Output","inv","MulAdd","Output","mul_add","MulAddAssign","mul_add_assign","Saturating","saturating_add","saturating_sub","SaturatingAdd","saturating_add","SaturatingMul","saturating_mul","SaturatingSub","saturating_sub","WrappingAdd","wrapping_add","WrappingMul","wrapping_mul","WrappingNeg","wrapping_neg","WrappingShl","wrapping_shl","WrappingShr","wrapping_shr","WrappingSub","wrapping_sub","checked_pow","pow","Pow","Output","pow","abs","abs_sub","signum","Signed","abs","abs_sub","signum","is_positive","is_negative","Unsigned","RandomExt","random","random_using","sample_axis","sample_axis_using","SamplingStrategy","WithReplacement","WithoutReplacement","F32","0","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","fmt","fmt","fmt","into_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","source","eq","eq","ne","eq","ne","eq","eq","ne","eq","len","from_seed","from_rng","from_seed","from_rng","default","from","from","from","from","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","next","size_hint","next","size_hint","next","size_hint","next","size_hint","fmt","fmt","fmt","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","new","new_inclusive","sample","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","default","fmt","fmt","fmt","read","clone","from","from","source","next_u32","next_u64","fill_bytes","try_fill_bytes","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","clone","clone","fmt","fmt","sample","new","new_inclusive","new","new","update_weights","new","from_ratio","new","new","reseed","new","len","is_empty","index","into_vec","iter","CUSTOM_START","INTERNAL_START","new","inner","take_inner","raw_os_error","code","new","new","new","new","new_with_size","new","new","new","new","new","new","new","new","new","new","from_mean_cv","from_zscore","new","from_mean_cv","from_zscore","new","new","new","new_with_shape","new","new","new"],"q":["ndarray_rand","ndarray_rand::rand","ndarray_rand::rand::distributions","ndarray_rand::rand::distributions::uniform","","","","","","","","","","","","","","","","","","","ndarray_rand::rand::distributions","ndarray_rand::rand::distributions::weighted","ndarray_rand::rand::distributions::weighted::alias_method","","ndarray_rand::rand::distributions::weighted","","","","","","ndarray_rand::rand::distributions","","","","","","","","","","","","","","","","","","ndarray_rand::rand","ndarray_rand::rand::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_rand::rand","ndarray_rand::rand::rngs","ndarray_rand::rand::rngs::adapter","","","ndarray_rand::rand::rngs","ndarray_rand::rand::rngs::mock","ndarray_rand::rand::rngs","","","","ndarray_rand::rand","ndarray_rand::rand::seq","ndarray_rand::rand::seq::index","","","","","ndarray_rand::rand::seq","","","","","","","","","","","","","","","","ndarray_rand::rand","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_rand","ndarray_rand::rand_distr","ndarray_rand::rand_distr::weighted_alias","","","","","","ndarray_rand::rand_distr","ndarray_rand::rand_distr::uniform","","","","","","","","","","","","","","","","","","","ndarray_rand::rand_distr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_rand::rand_distr::num_traits","ndarray_rand::rand_distr::num_traits::bounds","","","ndarray_rand::rand_distr::num_traits","ndarray_rand::rand_distr::num_traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_rand::rand_distr::num_traits","ndarray_rand::rand_distr::num_traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_rand::rand_distr::num_traits","ndarray_rand::rand_distr::num_traits::identities","","","","","","","","","","ndarray_rand::rand_distr::num_traits","ndarray_rand::rand_distr::num_traits::int","","","","","","","","","","","","","","","","","ndarray_rand::rand_distr::num_traits","ndarray_rand::rand_distr::num_traits::ops","ndarray_rand::rand_distr::num_traits::ops::checked","","","","","","","","","","","","","","","","ndarray_rand::rand_distr::num_traits::ops","ndarray_rand::rand_distr::num_traits::ops::inv","","","ndarray_rand::rand_distr::num_traits::ops","ndarray_rand::rand_distr::num_traits::ops::mul_add","","","","","ndarray_rand::rand_distr::num_traits::ops","ndarray_rand::rand_distr::num_traits::ops::overflowing","","","","","","ndarray_rand::rand_distr::num_traits::ops","ndarray_rand::rand_distr::num_traits::ops::saturating","","","","","","","","","ndarray_rand::rand_distr::num_traits::ops","ndarray_rand::rand_distr::num_traits::ops::wrapping","","","","","","","","","","","","ndarray_rand::rand_distr::num_traits","ndarray_rand::rand_distr::num_traits::pow","","","","","ndarray_rand::rand_distr::num_traits","ndarray_rand::rand_distr::num_traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_rand::rand_distr::num_traits","ndarray_rand::rand_distr::num_traits::sign","","","","","","","","","","ndarray_rand::rand_distr::num_traitsndarray_rand","","","","","","","","","","ndarray_rand::rand_distr","","","","","","","","","","ndarray_rand::rand_distr::uniform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_rand::rand::distributions::weighted::alias_method","","","","","","","","ndarray_rand::rand_distr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_rand::rand::rngs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_rand::rand::rngs::adapter","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_rand::rand::rngs::mock","","","","","","","","","","ndarray_rand::rand::rngs","","","","","","","","","","ndarray_rand::rand::seq::index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_rand::rand::seq","","","","","","","","","ndarray_rand::rand","","","","","","","","","ndarray_rand::rand_distrndarray_rand::rand_distr::num_traits","","","","","","","","","","","","","","","","","ndarray_rand","","","","","","","","","","","","","","","","","","","","ndarray_rand::rand_distr::num_traits","","","ndarray_rand::rand::seq::index","ndarray_rand::rand_distr","ndarray_rand::rand_distr::uniform","ndarray_rand::rand_distr","ndarray_rand::rand::seq::index","ndarray_rand::rand::rngs","ndarray_rand::rand_distr","ndarray_rand::rand::seq::index","ndarray_rand::rand_distr::uniform","ndarray_rand::rand_distr","ndarray_rand::rand::rngs","ndarray_rand::rand_distr::uniform","ndarray_rand::rand::rngs::adapter","","ndarray_rand::rand_distr","ndarray_rand::rand::seq::index","ndarray_rand::rand_distr::uniform","ndarray_rand::rand_distr","ndarray_rand::rand::rngs","ndarray_rand::rand_distr","ndarray_rand::rand::rngs::mock","ndarray_rand::rand_distr","ndarray_rand::rand::rngs::adapter","ndarray_rand::rand_distr","","ndarray_rand::rand::seq","ndarray_rand::rand::distributions::weighted::alias_method","ndarray_rand::rand::rngs","ndarray_rand::rand::seq::index","ndarray_rand::rand::rngs::adapter","ndarray_rand::rand_distr","","ndarray_rand::rand_distr::uniform","ndarray_rand::rand::seq::index","ndarray_rand::rand_distr","","ndarray_rand::rand::rngs","ndarray_rand::rand_distr","","ndarray_rand::rand_distr::uniform","","ndarray_rand::rand::rngs::mock","ndarray_rand::rand_distr","","ndarray_rand::rand::rngs","ndarray_rand::rand_distr::uniform","ndarray_rand::rand::rngs::adapter","ndarray_rand::rand_distr","ndarray_rand::rand::rngs::mock","","ndarray_rand::rand::rngs","","ndarray_rand::rand::seq::index","ndarray_rand::rand::rngs","","ndarray_rand::rand_distr","ndarray_rand::rand::seq","ndarray_rand::rand::rngs","","","","","ndarray_rand::rand::seq::index","ndarray_rand::rand_distr","ndarray_rand::rand::seq::index","ndarray_rand::rand_distr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_rand::rand::seq::index","","ndarray_rand::rand_distr","","ndarray_rand::rand::seq::index","","ndarray_rand::rand::seq","","ndarray_rand::rand_distr","ndarray_rand::rand::rngs::adapter","ndarray_rand::rand_distr","ndarray_rand::rand::rngs","","","","","","","","ndarray_rand::rand::rngs::mock","","","","ndarray_rand::rand::rngs::adapter","","","","ndarray_rand::rand::rngs","","","","ndarray_rand::rand::rngs::adapter","","","","ndarray_rand::rand_distr::uniform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_rand::rand::rngs","ndarray_rand::rand","","ndarray_rand::rand::rngs","ndarray_rand::rand","ndarray_rand::rand::rngs","ndarray_rand::rand","","","ndarray_rand::rand::rngs","","","","ndarray_rand::rand_distr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_rand","","","","","ndarray_rand::rand_distr","","ndarray_rand::rand::distributions::weighted::alias_method","ndarray_rand::rand_distr","","","","ndarray_rand::rand::rngs::adapter","","","ndarray_rand::rand::rngs::mock","ndarray_rand::rand::seq::index","","","","","ndarray_rand::rand","","","","","","","ndarray_rand::rand_distr","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["<code>rand</code>, re-exported for convenience and …","Generating random samples from probability distributions","A distribution uniformly sampling numbers within a given …","Sample values uniformly between two bounds.","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Construct self, with inclusive lower bound and exclusive …","Construct self, with inclusive bounds <code>[low, high]</code>.","Sample a value.","Sample a single value uniformly from a range with …","Sample a single value uniformly from a range with …","Helper trait similar to <code>Borrow</code> but implemented only for …","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","Range that supports generating a single sample …","Generate a sample from the given range.","Check whether the range is empty.","The back-end implementing [<code>UniformSampler</code>] for integer …","The back-end implementing [<code>UniformSampler</code>] for <code>char</code>.","The back-end implementing [<code>UniformSampler</code>] for …","The back-end implementing [<code>UniformSampler</code>] for <code>Duration</code>.","Weighted index sampling","","","","A distribution using weighted sampling of discrete items","Error type returned from <code>WeightedIndex::new</code>.","The provided weight collection contains no items.","A weight is either less than zero, greater than the …","All items in the provided weight collection are zero.","Too many weights are provided (length greater than …","Types (distributions) that can be used to create a random …","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","Create an iterator that generates random values of <code>T</code>, …","An iterator that generates random values of <code>T</code> with …","A generic random value distribution, implemented for many …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","<code>p < 0</code> or <code>p > 1</code>.","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …","Sample values uniformly between two bounds.","Error type returned from <code>WeightedIndex::new</code>.","The provided weight collection contains no items.","A weight is either less than zero, greater than the …","All items in the provided weight collection are zero.","Too many weights are provided (length greater than …","A distribution using weighted sampling of discrete items","Convenience re-export of common members","Types (distributions) that can be used to create a random …","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","Create an iterator that generates random values of <code>T</code>, …","A small-state, fast non-crypto PRNG","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","Extension trait on iterators, providing random sampling …","Choose one element at random from the iterator.","Choose one element at random from the iterator.","Collects values at random from the iterator into a …","Collects <code>amount</code> values at random from the iterator into a …","Extension trait on slices, providing random mutation and …","The element type.","Returns a reference to one random element of the slice, …","Returns a mutable reference to one random element of the …","Chooses <code>amount</code> elements from the slice at random, without …","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Shuffle a mutable slice in place.","Shuffle a slice in place, but exit early.","Generates a random value using the thread-local random …","Retrieve the lazily-initialized thread-local random …","A marker trait used to indicate that an [<code>RngCore</code>] or …","An automatically-implemented extension trait on [<code>RngCore</code>] …","Return a random value supporting the <code>Standard</code> …","Generate a random value in the given range.","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Fill any type implementing [<code>Fill</code>] with random data","Fill any type implementing <code>Fill</code> with random data","Return a bool with a probability <code>p</code> of being true.","Return a bool with a probability of <code>numerator/denominator</code> …","The core of a random number generator.","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Fill <code>dest</code> with random data.","Fill <code>dest</code> entirely with random data.","A random number generator that can be explicitly seeded.","Seed type, which is restricted to types …","Create a new PRNG using the given seed.","Create a new PRNG using a <code>u64</code> seed.","Create a new PRNG seeded from another <code>Rng</code>.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Random number generators and adapters","Wrappers / adapters forming RNGs","<code>ReadRng</code> error type","An RNG that reads random bytes straight from any type …","A wrapper around any PRNG that implements <code>BlockRngCore</code>, …","Mock random number generator","A simple implementation of <code>RngCore</code> for testing purposes.","A small-state, fast non-crypto PRNG","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","A random number generator that retrieves randomness from …","Sequence-related functionality","Low-level API for sampling indices","A vector of indices.","Return type of <code>IndexVec::iter</code>.","Return type of <code>IndexVec::into_iter</code>.","Randomly sample exactly <code>amount</code> distinct indices from …","Randomly sample exactly <code>amount</code> distinct indices from …","Extension trait on slices, providing random mutation and …","The element type.","Returns a reference to one random element of the slice, …","Returns a mutable reference to one random element of the …","Chooses <code>amount</code> elements from the slice at random, without …","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Shuffle a mutable slice in place.","Shuffle a slice in place, but exit early.","Extension trait on iterators, providing random sampling …","Choose one element at random from the iterator.","Choose one element at random from the iterator.","Collects values at random from the iterator into a …","Collects <code>amount</code> values at random from the iterator into a …","An iterator over multiple slice elements.","Generates a random value using the thread-local random …","A marker trait used to indicate that an [<code>RngCore</code>] or …","Error type of random number generators","The core of a random number generator.","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Fill <code>dest</code> with random data.","Fill <code>dest</code> entirely with random data.","A random number generator that can be explicitly seeded.","Seed type, which is restricted to types …","Create a new PRNG using the given seed.","Create a new PRNG using a <code>u64</code> seed.","Create a new PRNG seeded from another <code>Rng</code>.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Retrieve the lazily-initialized thread-local random …","Types which may be filled with random data","Fill self with random data","An automatically-implemented extension trait on [<code>RngCore</code>] …","Return a random value supporting the <code>Standard</code> …","Generate a random value in the given range.","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Fill any type implementing [<code>Fill</code>] with random data","Fill any type implementing <code>Fill</code> with random data","Return a bool with a probability <code>p</code> of being true.","Return a bool with a probability of <code>numerator/denominator</code> …","<code>rand-distr</code>, re-exported for convenience and …","This module contains an implementation of alias method …","A distribution using weighted sampling to pick a …","Trait that must be implemented for weights, that are used …","Maximum number representable by <code>Self</code>.","Element of <code>Self</code> equivalent to 0.","Produce an instance of <code>Self</code> from a <code>u32</code> value, or return …","Sums all values in slice <code>values</code>.","A distribution uniformly sampling numbers within a given …","Sample values uniformly between two bounds.","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Construct self, with inclusive lower bound and exclusive …","Construct self, with inclusive bounds <code>[low, high]</code>.","Sample a value.","Sample a single value uniformly from a range with …","Sample a single value uniformly from a range with …","Helper trait similar to <code>Borrow</code> but implemented only for …","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","Range that supports generating a single sample …","Generate a sample from the given range.","Check whether the range is empty.","The back-end implementing [<code>UniformSampler</code>] for integer …","The back-end implementing [<code>UniformSampler</code>] for <code>char</code>.","The back-end implementing [<code>UniformSampler</code>] for …","The back-end implementing [<code>UniformSampler</code>] for <code>Duration</code>.","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","<code>p < 0</code> or <code>p > 1</code>.","An iterator that generates random values of <code>T</code> with …","Types (distributions) that can be used to create a random …","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","Create an iterator that generates random values of <code>T</code>, …","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","A generic random value distribution, implemented for many …","Sample values uniformly between two bounds.","The binomial distribution <code>Binomial(n, p)</code>.","Error type returned from <code>Binomial::new</code>.","<code>p < 0</code> or <code>nan</code>.","<code>p > 1</code>.","The Cauchy distribution <code>Cauchy(median, scale)</code>.","Error type returned from <code>Cauchy::new</code>.","<code>scale <= 0</code> or <code>nan</code>.","The Dirichlet distribution <code>Dirichlet(alpha)</code>.","Error type returned from <code>Dirchlet::new</code>.","<code>alpha.len() < 2</code>.","<code>alpha <= 0.0</code> or <code>nan</code>.","<code>size < 2</code>.","Error type returned from <code>Exp::new</code>.","<code>lambda < 0</code> or <code>nan</code>.","The exponential distribution <code>Exp(lambda)</code>.","Samples floating-point numbers according to the …","The Beta distribution with shape parameters <code>alpha</code> and <code>beta</code>…","Error type returned from <code>Beta::new</code>.","<code>alpha <= 0</code> or <code>nan</code>.","<code>beta <= 0</code> or <code>nan</code>.","The chi-squared distribution <code>χ²(k)</code>, where <code>k</code> is the …","Error type returned from <code>ChiSquared::new</code> and <code>StudentT::new</code>…","<code>0.5 * k <= 0</code> or <code>nan</code>.","Error type returned from <code>Gamma::new</code>.","<code>shape <= 0</code> or <code>nan</code>.","<code>scale <= 0</code> or <code>nan</code>.","<code>1 / scale == 0</code>.","The Fisher F distribution <code>F(m, n)</code>.","Error type returned from <code>FisherF::new</code>.","<code>m <= 0</code> or <code>nan</code>.","<code>n <= 0</code> or <code>nan</code>.","The Gamma distribution <code>Gamma(shape, scale)</code> distribution.","The Student t distribution, <code>t(nu)</code>, where <code>nu</code> is the …","Error type returned from <code>Geometric::new</code>.","<code>p < 0 || p > 1</code> or <code>nan</code>","The geometric distribution <code>Geometric(p)</code> bounded to …","Samples integers according to the geometric distribution …","Error type returned from <code>Hypergeometric::new</code>.","<code>total_population_size</code> is too large, causing floating …","<code>population_with_feature > total_population_size</code>.","<code>sample_size > total_population_size</code>.","The hypergeometric distribution <code>Hypergeometric(N, K, n)</code>.","The inverse Gaussian distribution","Error type returned from <code>InverseGaussian::new</code>","<code>mean <= 0</code> or <code>nan</code>.","<code>shape <= 0</code> or <code>nan</code>.","Error type returned from <code>Normal::new</code> and <code>LogNormal::new</code>.","The mean value is too small (log-normal samples must be …","The standard deviation or other dispersion parameter is …","The log-normal distribution <code>ln N(mean, std_dev**2)</code>.","The normal distribution <code>N(mean, std_dev**2)</code>.","Samples floating-point numbers according to the normal …","The normal-inverse Gaussian distribution","Error type returned from <code>NormalInverseGaussian::new</code>","<code>alpha <= 0</code> or <code>nan</code>.","<code>|beta| >= alpha</code> or <code>nan</code>.","Error type returned from <code>Pareto::new</code>.","<code>scale <= 0</code> or <code>nan</code>.","<code>shape <= 0</code> or <code>nan</code>.","Samples floating-point numbers according to the Pareto …","The PERT distribution.","Error type returned from [<code>Pert</code>] constructors.","<code>max < min</code> or <code>min</code> or <code>max</code> is NaN.","<code>mode < min</code> or <code>mode > max</code> or <code>mode</code> is NaN.","<code>shape < 0</code> or <code>shape</code> is NaN","Error type returned from <code>Poisson::new</code>.","<code>lambda <= 0</code> or <code>nan</code>.","The Poisson distribution <code>Poisson(lambda)</code>.","The triangular distribution.","Error type returned from [<code>Triangular::new</code>].","<code>max < min</code> or <code>min</code> or <code>max</code> is NaN.","<code>mode < min</code> or <code>mode > max</code> or <code>mode</code> is NaN.","Samples uniformly from the unit ball (surface and …","Samples uniformly from the edge of the unit circle in two …","Samples uniformly from the unit disc in two dimensions.","Samples uniformly from the surface of the unit sphere in …","Error type returned from <code>Weibull::new</code>.","<code>scale <= 0</code> or <code>nan</code>.","<code>shape <= 0</code> or <code>nan</code>.","Samples floating-point numbers according to the Weibull …","Error type returned from <code>WeightedIndex::new</code>.","The provided weight collection contains no items.","A weight is either less than zero, greater than the …","All items in the provided weight collection are zero.","Too many weights are provided (length greater than …","A distribution using weighted sampling of discrete items","A distribution using weighted sampling to pick a …","","Numbers which have upper and lower bounds","returns the smallest finite number this type can represent","returns the largest finite number this type can represent","","A generic trait for converting a value to a number.","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","A generic trait for converting a number to a value.","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts a <code>usize</code> to return an optional value of this …","Converts an <code>u8</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u128</code> to return an optional value of this …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Cast from one machine scalar to another.","An interface for casting between machine scalars.","Creates a number from another value that can be converted …","A generic interface for casting between machine scalars …","Convert a value to another, using the <code>as</code> operator.","","Generic trait for floating point numbers that works with …","Returns positive infinity.","Returns negative infinity.","Returns NaN.","Returns <code>-0.0</code>.","Returns the smallest finite value that this type can …","Returns the smallest positive, normalized value that this …","Returns epsilon, a small positive value.","Returns the largest finite value that this type can …","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns the floating point category of the number. If …","Returns the largest integer less than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the nearest integer to a number. Round half-way …","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of <code>self</code>. Returns …","Returns a number that represents the sign of <code>self</code>.","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns the minimum of the two numbers.","Returns the maximum of the two numbers.","Returns the reciprocal (multiplicative inverse) of the …","Raise a number to an integer power.","Converts to degrees, assuming the number is in radians.","Converts to radians, assuming the number is in degrees.","Returns the mantissa, base 2 exponent, and sign as …","Generic trait for floating point numbers","Returns the <code>NaN</code> value.","Returns the infinite value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns the smallest finite value that this type can …","Returns the smallest positive, normalized value that this …","Returns epsilon, a small positive value.","Returns the largest finite value that this type can …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns the floating point category of the number. If …","Returns the largest integer less than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the nearest integer to a number. Round half-way …","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Returns a number that represents the sign of <code>self</code>.","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Raise a number to an integer power.","Raise a number to a floating point power.","Take the square root of a number.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns the natural logarithm of the number.","Returns the logarithm of the number with respect to an …","Returns the base 2 logarithm of the number.","Returns the base 10 logarithm of the number.","Converts radians to degrees.","Converts degrees to radians.","Returns the maximum of the two numbers.","Returns the minimum of the two numbers.","The positive difference of two numbers.","Take the cubic root of a number.","Calculate the length of the hypotenuse of a right-angle …","Computes the sine of a number (in radians).","Computes the cosine of a number (in radians).","Computes the tangent of a number (in radians).","Computes the arcsine of a number. Return value is in …","Computes the arccosine of a number. Return value is in …","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Simultaneously computes the sine and cosine of the …","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Hyperbolic sine function.","Hyperbolic cosine function.","Hyperbolic tangent function.","Inverse hyperbolic sine function.","Inverse hyperbolic cosine function.","Inverse hyperbolic tangent function.","Returns the mantissa, base 2 exponent, and sign as …","","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Return <code>log10(2.0)</code>.","Return <code>log2(10.0)</code>.","","Defines an additive identity element for <code>Self</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Defines a multiplicative identity element for <code>Self</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns the additive identity, <code>0</code>.","Returns the multiplicative identity, <code>1</code>.","","Generic trait for primitive integers.","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of leading zeros in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Raises self to the power of <code>exp</code>, using exponentiation by …","","","Performs addition that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Performs subtraction that returns <code>None</code> instead of …","Subtracts two numbers, checking for underflow. If …","Performs multiplication that returns <code>None</code> instead of …","Multiplies two numbers, checking for underflow or …","Performs division that returns <code>None</code> instead of panicking …","Divides two numbers, checking for underflow, overflow and …","Performs an integral remainder that returns <code>None</code> instead …","Finds the remainder of dividing two numbers, checking for …","Performs negation that returns <code>None</code> if the result can’t …","Negates a number, returning <code>None</code> for results that can’t …","Performs a left shift that returns <code>None</code> on shifts larger …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Performs a right shift that returns <code>None</code> on shifts larger …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","The fused multiply-add assignment operation.","Performs the fused multiply-add operation.","","Performs addition with a flag for overflow.","Returns a tuple of the sum along with a boolean …","Performs substraction with a flag for overflow.","Returns a tuple of the difference along with a boolean …","Performs multiplication with a flag for overflow.","Returns a tuple of the product along with a boolean …","","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Saturating addition operator. Returns a+b, saturating at …","Saturating subtraction operator. Returns a-b, saturating …","Performs addition that saturates at the numeric bounds …","Saturating addition. Computes <code>self + other</code>, saturating at …","Performs subtraction that saturates at the numeric bounds …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs multiplication that saturates at the numeric …","Saturating multiplication. Computes <code>self * other</code>, …","","Performs addition that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Performs subtraction that wraps around on overflow.","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","Performs multiplication that wraps around on overflow.","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Performs a negation that does not panic.","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Performs a left shift that does not panic.","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …","Performs a right shift that does not panic.","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …","","Binary operator for raising a value to a power.","The result after applying the operator.","Returns <code>self</code> to the power <code>rhs</code>.","Raises a value to the power of exp, using exponentiation …","Raises a value to the power of exp, returning <code>None</code> if an …","","A trait for real number types that do not necessarily have…","Returns the smallest finite value that this type can …","Returns the smallest positive, normalized value that this …","Returns epsilon, a small positive value.","Returns the largest finite value that this type can …","Returns the largest integer less than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the nearest integer to a number. Round half-way …","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Returns a number that represents the sign of <code>self</code>.","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Raise a number to an integer power.","Raise a number to a real number power.","Take the square root of a number.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns the natural logarithm of the number.","Returns the logarithm of the number with respect to an …","Returns the base 2 logarithm of the number.","Returns the base 10 logarithm of the number.","Converts radians to degrees.","Converts degrees to radians.","Returns the maximum of the two numbers.","Returns the minimum of the two numbers.","The positive difference of two numbers.","Take the cubic root of a number.","Calculate the length of the hypotenuse of a right-angle …","Computes the sine of a number (in radians).","Computes the cosine of a number (in radians).","Computes the tangent of a number (in radians).","Computes the arcsine of a number. Return value is in …","Computes the arccosine of a number. Return value is in …","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Simultaneously computes the sine and cosine of the …","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Hyperbolic sine function.","Hyperbolic cosine function.","Hyperbolic tangent function.","Inverse hyperbolic sine function.","Inverse hyperbolic cosine function.","Inverse hyperbolic tangent function.","","Useful functions for signed numbers (i.e. numbers that …","Computes the absolute value.","The positive difference of two numbers.","Returns the sign of the number.","Returns true if the number is positive and false if the …","Returns true if the number is negative and false if the …","Computes the absolute value.","The positive difference of two numbers.","Returns the sign of the number.","A trait for values which cannot be negative","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…","","Convert from a string and radix (typically <code>2..=36</code>).","The trait for types implementing basic numeric operations","The trait for <code>Num</code> types which also implement numeric …","The trait for references which implement numeric …","The trait for types implementing numeric assignment …","The trait for <code>Num</code> types which also implement assignment …","The trait for <code>NumAssign</code> types which also implement …","","","","","","A value bounded by a minimum and a maximum","A value bounded by a minimum value","A value bounded by a maximum value","Numbers which have upper and lower bounds","returns the smallest finite number this type can represent","returns the largest finite number this type can represent","Generic trait for floating point numbers","Returns the <code>NaN</code> value.","Returns the infinite value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns the smallest finite value that this type can …","Returns the smallest positive, normalized value that this …","Returns epsilon, a small positive value.","Returns the largest finite value that this type can …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns the floating point category of the number. If …","Returns the largest integer less than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the nearest integer to a number. Round half-way …","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Returns a number that represents the sign of <code>self</code>.","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Raise a number to an integer power.","Raise a number to a floating point power.","Take the square root of a number.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns the natural logarithm of the number.","Returns the logarithm of the number with respect to an …","Returns the base 2 logarithm of the number.","Returns the base 10 logarithm of the number.","Converts radians to degrees.","Converts degrees to radians.","Returns the maximum of the two numbers.","Returns the minimum of the two numbers.","The positive difference of two numbers.","Take the cubic root of a number.","Calculate the length of the hypotenuse of a right-angle …","Computes the sine of a number (in radians).","Computes the cosine of a number (in radians).","Computes the tangent of a number (in radians).","Computes the arcsine of a number. Return value is in …","Computes the arccosine of a number. Return value is in …","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Simultaneously computes the sine and cosine of the …","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Hyperbolic sine function.","Hyperbolic cosine function.","Hyperbolic tangent function.","Inverse hyperbolic sine function.","Inverse hyperbolic cosine function.","Inverse hyperbolic tangent function.","Returns the mantissa, base 2 exponent, and sign as …","","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Return <code>log10(2.0)</code>.","Return <code>log2(10.0)</code>.","Cast from one machine scalar to another.","A generic interface for casting between machine scalars …","Convert a value to another, using the <code>as</code> operator.","A generic trait for converting a number to a value.","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts a <code>usize</code> to return an optional value of this …","Converts an <code>u8</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u128</code> to return an optional value of this …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","An interface for casting between machine scalars.","Creates a number from another value that can be converted …","A generic trait for converting a value to a number.","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","Returns the multiplicative identity, <code>1</code>.","Returns the additive identity, <code>0</code>.","Defines a multiplicative identity element for <code>Self</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Defines an additive identity element for <code>Self</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Generic trait for primitive integers.","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of leading zeros in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Raises self to the power of <code>exp</code>, using exponentiation by …","Performs addition that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Performs division that returns <code>None</code> instead of panicking …","Divides two numbers, checking for underflow, overflow and …","Performs multiplication that returns <code>None</code> instead of …","Multiplies two numbers, checking for underflow or …","Performs negation that returns <code>None</code> if the result can’t …","Negates a number, returning <code>None</code> for results that can’t …","Performs an integral remainder that returns <code>None</code> instead …","Finds the remainder of dividing two numbers, checking for …","Performs a left shift that returns <code>None</code> on shifts larger …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Performs a right shift that returns <code>None</code> on shifts larger …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","Performs subtraction that returns <code>None</code> instead of …","Subtracts two numbers, checking for underflow. If …","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","The fused multiply-add assignment operation.","Performs the fused multiply-add operation.","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Saturating addition operator. Returns a+b, saturating at …","Saturating subtraction operator. Returns a-b, saturating …","Performs addition that saturates at the numeric bounds …","Saturating addition. Computes <code>self + other</code>, saturating at …","Performs multiplication that saturates at the numeric …","Saturating multiplication. Computes <code>self * other</code>, …","Performs subtraction that saturates at the numeric bounds …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Performs multiplication that wraps around on overflow.","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Performs a negation that does not panic.","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Performs a left shift that does not panic.","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …","Performs a right shift that does not panic.","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …","Performs subtraction that wraps around on overflow.","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Binary operator for raising a value to a power.","The result after applying the operator.","Returns <code>self</code> to the power <code>rhs</code>.","Computes the absolute value.","The positive difference of two numbers.","Returns the sign of the number.","Useful functions for signed numbers (i.e. numbers that …","Computes the absolute value.","The positive difference of two numbers.","Returns the sign of the number.","Returns true if the number is positive and false if the …","Returns true if the number is negative and false if the …","A trait for values which cannot be negative","Constructors for n-dimensional arrays with random …","Create an array with shape <code>dim</code> with elements drawn from …","Create an array with shape <code>dim</code> with elements drawn from …","Sample <code>n_samples</code> lanes slicing along <code>axis</code> using the …","Sample <code>n_samples</code> lanes slicing along <code>axis</code> using the …","Used as parameter in <code>sample_axis</code> and <code>sample_axis_using</code> to …","","","A wrapper type that allows casting f64 distributions to …onvert into an iterator over the indices as a sequence …reate a new <code>Uniform</code> instance which samples uniformly …","Create a new <code>Uniform</code> instance which samples uniformly …","","Creates a new a <code>WeightedIndex</code> [<code>Distribution</code>] using the …","Update a subset of weights, without changing the number …","Construct a new <code>Bernoulli</code> with the given probability of …","Construct a new <code>Bernoulli</code> with the probability of success …","Create a new <code>ReadRng</code> from a <code>Read</code>.","Create a new <code>ReseedingRng</code> from an existing PRNG, combined …","Reseed the internal PRNG.","Create a <code>StepRng</code>, yielding an arithmetic sequence …","Returns the number of indices","Returns <code>true</code> if the length is 0.","Return the value at the given <code>index</code>.","Return result as a <code>Vec<usize></code>. Conversion may or may not …","Iterate over the indices as a sequence of <code>usize</code> values","Codes at or above this point can be used by users to …","Codes below this point represent OS Errors (i.e. positive …","Construct from any type supporting <code>std::error::Error</code>","Reference the inner error (<code>std</code> only)","Unwrap the inner error (<code>std</code> only)","Extract the raw OS error code (if this error came from …","Retrieve the error code, if any.","Creates a new [<code>WeightedAliasIndex</code>].","Construct a new <code>Binomial</code> with the given shape parameters <code>n</code>…","Construct a new <code>Cauchy</code> with the given shape parameters …","Construct a new <code>Dirichlet</code> with the given alpha parameter …","Construct a new <code>Dirichlet</code> with the given shape parameter …","Construct a new <code>Exp</code> with the given shape parameter <code>lambda</code>.","Construct an object representing the <code>Beta(alpha, beta)</code> …","Create a new chi-squared distribution with …","Create a new <code>FisherF</code> distribution, with the given …","Construct an object representing the <code>Gamma(shape, scale)</code> …","Create a new Student t distribution with <code>n</code> degrees of …","Construct a new <code>Geometric</code> with the given shape parameter <code>p</code>…","Constructs a new <code>Hypergeometric</code> with the shape parameters …","Construct a new <code>InverseGaussian</code> distribution with the …","Construct, from (log-space) mean and standard deviation","Construct, from (linear-space) mean and coefficient of …","Sample from a z-score","Construct, from mean and standard deviation","Construct, from mean and coefficient of variation","Sample from a z-score","Construct a new <code>NormalInverseGaussian</code> distribution with …","Construct a new Pareto distribution with given <code>scale</code> and …","Set up the PERT distribution with defined <code>min</code>, <code>max</code> and …","Set up the PERT distribution with defined <code>min</code>, <code>max</code>, <code>mode</code> …","Construct a new <code>Poisson</code> with the given shape parameter …","Set up the Triangular distribution with defined <code>min</code>, <code>max</code> …","Construct a new <code>Weibull</code> distribution with given <code>scale</code> and …"],"i":[0,0,0,0,0,1,0,2,2,2,2,2,2,0,3,0,4,4,0,0,0,0,0,0,0,0,0,0,5,5,5,5,0,6,6,0,0,0,0,7,0,0,0,0,0,5,5,5,5,0,0,0,6,6,0,0,0,0,8,8,8,8,0,9,9,9,9,9,9,9,9,9,0,0,0,0,10,10,10,10,10,10,10,10,0,11,11,11,11,0,12,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,9,9,9,9,0,8,8,8,8,0,0,0,0,0,11,11,11,11,0,12,12,12,12,12,0,0,13,0,10,10,10,10,10,10,10,10,0,0,0,0,14,14,14,14,0,0,0,1,0,2,2,2,2,2,2,0,3,0,4,4,0,0,0,0,0,0,0,7,0,0,6,6,0,0,0,0,0,0,15,15,0,0,16,0,0,17,17,17,0,18,0,0,0,0,19,19,0,0,20,0,21,21,21,0,0,22,22,0,0,0,23,0,0,0,24,24,24,0,0,0,25,25,0,26,26,0,0,0,0,0,27,27,0,28,28,0,0,0,29,29,29,0,30,0,0,0,31,31,0,0,0,0,0,32,32,0,0,5,5,5,5,0,0,0,0,33,33,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,0,36,0,37,0,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,41,41,41,0,42,42,42,0,0,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,0,52,52,0,0,53,53,0,54,0,0,55,0,56,0,57,0,0,58,58,0,59,0,60,0,61,0,0,62,0,63,0,64,0,65,0,66,0,67,0,0,68,68,0,0,0,0,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,0,0,70,70,70,70,70,0,0,0,0,0,71,71,0,0,0,0,0,0,0,72,72,0,73,0,0,0,0,33,33,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,37,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,36,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,0,42,42,42,0,41,41,41,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,44,0,47,0,46,0,49,0,48,0,50,0,51,0,45,0,52,52,0,53,53,0,54,0,58,58,0,59,0,61,0,60,0,62,0,64,0,65,0,66,0,67,0,63,0,0,0,68,68,0,0,0,0,70,70,70,70,70,0,0,74,74,74,74,0,75,75,0,76,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,83,5,5,5,5,5,5,5,5,5,5,5,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,7,7,7,7,7,7,7,7,7,7,7,87,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,104,104,15,15,15,15,15,15,15,15,15,15,15,105,105,105,105,105,105,105,105,105,105,16,16,16,16,16,16,16,16,16,16,16,106,106,106,106,106,106,106,106,106,106,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,107,107,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,108,108,109,109,109,109,109,109,109,109,109,109,19,19,19,19,19,19,19,19,19,19,19,110,110,110,110,110,110,110,110,110,110,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,111,111,111,111,111,111,111,111,111,111,22,22,22,22,22,22,22,22,22,22,22,112,112,112,112,112,112,112,112,112,112,113,113,113,113,113,113,113,113,113,113,23,23,23,23,23,23,23,23,23,23,23,114,114,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,115,115,115,24,24,24,24,24,24,24,24,24,24,24,116,116,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,118,118,118,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,122,122,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,123,123,123,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,31,31,31,31,31,31,31,31,31,31,31,126,126,126,126,126,126,126,126,126,126,127,127,127,127,127,127,127,127,127,127,128,128,128,128,128,128,128,128,128,128,129,129,129,129,129,129,129,129,129,129,32,32,32,32,32,32,32,32,32,32,32,130,130,130,130,130,130,130,130,130,130,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,73,72,73,98,84,78,86,99,92,85,98,81,77,91,80,93,95,87,100,79,83,90,88,96,7,94,89,5,101,82,92,100,95,87,86,80,98,88,83,91,7,85,79,81,96,5,77,90,78,93,5,96,96,91,91,98,90,90,7,101,91,91,90,90,92,98,77,98,77,85,85,85,85,85,85,85,85,85,85,85,85,89,85,87,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,83,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,87,85,85,85,85,88,77,85,88,85,86,100,100,84,84,99,99,101,101,5,93,7,90,90,90,90,91,91,91,91,96,96,96,96,95,95,95,95,92,92,92,92,94,94,94,94,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,80,80,80,80,79,79,79,78,78,78,78,78,81,81,81,78,78,78,78,78,80,80,80,80,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,97,102,102,97,11,97,102,102,102,97,97,97,97,29,18,32,26,27,19,16,25,31,22,20,15,28,17,21,30,24,23,22,31,15,21,29,20,18,19,28,23,16,26,30,32,17,24,22,32,107,16,104,25,112,120,111,106,27,19,110,26,30,119,113,121,23,31,125,28,123,24,108,124,127,118,115,29,109,103,128,17,18,20,116,129,21,130,126,105,15,122,117,114,107,24,129,15,122,112,113,127,126,105,18,32,106,28,109,125,130,21,16,19,26,104,103,120,31,123,118,128,115,23,116,119,30,124,17,20,111,110,108,114,22,29,111,118,123,120,127,115,124,106,108,128,108,103,107,122,121,114,116,105,110,126,125,119,130,112,113,109,117,104,129,120,75,76,75,76,76,77,77,82,83,83,86,86,94,95,95,96,98,98,98,98,98,102,102,102,102,102,102,102,103,104,105,106,106,107,109,110,111,112,113,114,116,117,118,118,118,119,119,119,121,122,123,123,124,125,130],"f":[null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,[[]],null,[[]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["distiter",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["distiter",3]],null,null,null,null,[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[["usize",15]],[["global",3],["vec",3]]],null,null,[[],["option",4]],[[],["option",4]],[[["usize",15]],["slicechooseiter",3]],[[],[["result",4],["weightederror",4]]],[[],[["result",4],["weightederror",4]]],[[["usize",15]],[["result",4],["slicechooseiter",3],["weightederror",4]]],[[]],[[["usize",15]]],[[]],[[],["threadrng",3]],null,null,[[]],[[]],[[]],[[],["distiter",3]],[[]],[[],[["result",4],["error",3]]],[[["f64",15]],["bool",15]],[[["u32",15]],["bool",15]],null,[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],null,null,[[]],[[["u64",15]]],[[],[["result",4],["error",3]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],["indexvec",4]],[[["usize",15]],[["weightederror",4],["indexvec",4],["result",4]]],null,null,[[],["option",4]],[[],["option",4]],[[["usize",15]],["slicechooseiter",3]],[[],[["result",4],["weightederror",4]]],[[],[["result",4],["weightederror",4]]],[[["usize",15]],[["result",4],["slicechooseiter",3],["weightederror",4]]],[[]],[[["usize",15]]],null,[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[["usize",15]],[["global",3],["vec",3]]],null,[[]],null,null,null,[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],null,null,[[]],[[["u64",15]]],[[],[["result",4],["error",3]]],[[]],[[],["threadrng",3]],null,[[],[["result",4],["error",3]]],null,[[]],[[]],[[]],[[],["distiter",3]],[[]],[[],[["result",4],["error",3]]],[[["f64",15]],["bool",15]],[[["u32",15]],["bool",15]],null,null,null,null,null,null,[[["u32",15]],["option",4]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,[[]],null,[[]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,[[]],[[],["distiter",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,null,[[],[["isize",15],["option",4]]],[[],[["option",4],["i8",15]]],[[],[["option",4],["i16",15]]],[[],[["i32",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["usize",15],["option",4]]],[[],[["option",4],["u8",15]]],[[],[["option",4],["u16",15]]],[[],[["u32",15],["option",4]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["f32",15]]],[[],[["option",4],["f64",15]]],null,[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i128",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[],["option",4]],null,[[],["option",4]],null,[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[],["bool",15]],null,[[]],[[]],[[],["bool",15]],[[]],[[]],null,null,[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],null,null,null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[["u32",15]],["option",4]],null,[[["u32",15]],["option",4]],null,null,null,[[]],null,null,null,[[]],null,[[]],null,null,[[]],null,[[]],null,[[]],null,null,[[]],[[]],null,[[]],null,[[]],null,[[]],null,null,[[]],null,[[]],null,[[]],null,[[]],null,[[["u32",15]]],null,[[["u32",15]]],null,null,null,[[]],[[["usize",15]]],[[["usize",15]],["option",4]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],null,null,null,[[["u32",15],["str",15]],["result",4]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],null,[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],null,[[]],null,[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i128",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],null,[[],["option",4]],null,[[],[["isize",15],["option",4]]],[[],[["option",4],["i8",15]]],[[],[["option",4],["i16",15]]],[[],[["i32",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["usize",15],["option",4]]],[[],[["option",4],["u8",15]]],[[],[["option",4],["u16",15]]],[[],[["u32",15],["option",4]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["f32",15]]],[[],[["option",4],["f64",15]]],[[]],[[]],null,[[]],[[]],[[],["bool",15]],null,[[]],[[]],[[],["bool",15]],null,[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[["u32",15]],["option",4]],null,[[["u32",15]],["option",4]],null,[[],["option",4]],null,null,[[]],null,null,[[]],null,[[]],null,[[]],[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[["u32",15]]],null,[[["u32",15]]],null,[[]],[[["usize",15]],["option",4]],[[["usize",15]]],null,null,[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,[[],["arraybase",3]],[[],["arraybase",3]],[[["usize",15],["samplingstrategy",4],["axis",3]],["array",6]],[[["usize",15],["samplingstrategy",4],["axis",3]],["array",6]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["indexvecintoiter",4]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["threadrng",3]],[[],["indexvecintoiter",4]],[[],["reseedingrng",3]],[[],["open01",3]],[[],["bernoulli",3]],[[],["uniformfloat",3]],[[],["indexvec",4]],[[],["openclosed01",3]],[[],["weightedindex",3]],[[],["stdrng",3]],[[],["bernoullierror",4]],[[],["standard",3]],[[],["uniformchar",3]],[[],["uniformduration",3]],[[],["steprng",3]],[[],["weightederror",4]],[[],["uniform",3]],[[],["smallrng",3]],[[],["uniformint",3]],[[],[["error",8],["option",4]]],[[["weightederror",4]],["bool",15]],[[["steprng",3]],["bool",15]],[[["steprng",3]],["bool",15]],[[["stdrng",3]],["bool",15]],[[["stdrng",3]],["bool",15]],[[["indexvec",4]],["bool",15]],[[["smallrng",3]],["bool",15]],[[["smallrng",3]],["bool",15]],[[["bernoullierror",4]],["bool",15]],[[],["usize",15]],[[],["stdrng",3]],[[],[["stdrng",3],["result",4],["error",3]]],[[],["smallrng",3]],[[],[["smallrng",3],["result",4],["error",3]]],[[],["threadrng",3]],[[["u32",15],["vec",3],["global",3]],["indexvec",4]],[[["rangeinclusive",3]],["uniform",3]],[[["vec",3],["usize",15],["global",3]],["indexvec",4]],[[["range",3]],["uniform",3]],[[]],[[]],[[],["i8",15]],[[]],[[]],[[]],[[]],[[]],[[],["nonzerou128",3]],[[]],[[]],[[]],[[],["u8",15]],[[],["nonzerou32",3]],[[],["f32",15]],[[]],[[]],[[],["u16",15]],[[]],[[],["i64",15]],[[],["nonzerou8",3]],[[],["i128",15]],[[]],[[]],[[]],[[],["u32",15]],[[]],[[],["i32",15]],[[]],[[]],[[]],[[],["usize",15]],[[],["f32",15]],[[],["wrapping",3]],[[]],[[],["u8",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["f64",15]],[[]],[[]],[[],["char",15]],[[],["u64",15]],[[],["nonzerou16",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["nonzerou64",3]],[[]],[[],["i16",15]],[[],["u128",15]],[[],["isize",15]],[[]],[[],["f64",15]],[[]],[[]],[[]],[[]],[[],["f64",15]],[[]],[[]],[[],["f32",15]],[[],["nonzerousize",3]],[[],["bool",15]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],["option",4]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],[["uniformint",3],["isize",15]]],[[],[["uniformint",3],["isize",15]]],[[]],[[]],[[]],[[],[["u16",15],["uniformint",3]]],[[],[["u16",15],["uniformint",3]]],[[]],[[]],[[]],[[],[["uniformint",3],["i8",15]]],[[],[["uniformint",3],["i8",15]]],[[]],[[]],[[]],[[],[["usize",15],["uniformint",3]]],[[],[["usize",15],["uniformint",3]]],[[]],[[]],[[]],[[],[["uniformfloat",3],["f64",15]]],[[],[["uniformfloat",3],["f64",15]]],[[]],[[]],[[],["uniformchar",3]],[[],["uniformchar",3]],[[]],[[],[["u128",15],["uniformint",3]]],[[],[["u128",15],["uniformint",3]]],[[]],[[]],[[]],[[],["uniformduration",3]],[[],["uniformduration",3]],[[],["duration",3]],[[],[["u64",15],["uniformint",3]]],[[],[["u64",15],["uniformint",3]]],[[]],[[]],[[]],[[],[["uniformfloat",3],["f32",15]]],[[],[["uniformfloat",3],["f32",15]]],[[]],[[]],[[],[["uniformint",3],["i32",15]]],[[],[["uniformint",3],["i32",15]]],[[]],[[]],[[]],[[],[["uniformint",3],["i64",15]]],[[],[["uniformint",3],["i64",15]]],[[]],[[]],[[]],[[],[["uniformint",3],["u8",15]]],[[],[["uniformint",3],["u8",15]]],[[]],[[]],[[]],[[],[["i128",15],["uniformint",3]]],[[],[["i128",15],["uniformint",3]]],[[]],[[]],[[]],[[],[["uniformint",3],["i16",15]]],[[],[["uniformint",3],["i16",15]]],[[]],[[]],[[]],[[],[["u32",15],["uniformint",3]]],[[],[["u32",15],["uniformint",3]]],[[]],[[]],[[]],[[],["osrng",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],[["usize",15],["result",4],["error",3]]],[[],["osrng",3]],[[["error",3]],["error",3]],[[["nonzerou32",3]],["error",3]],[[],[["error",8],["option",4]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[["perterror",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["betaerror",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["triangularerror",4]],["bool",15]],[[["fisherferror",4]],["bool",15]],[[["chisquarederror",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["exp",3]],[[],["error",4]],[[],["unitsphere",3]],[[],["error",4]],[[],["pareto",3]],[[],["gamma",3]],[[],["studentt",3]],[[],["unitcircle",3]],[[],["unitball",3]],[[],["cauchy",3]],[[],["error",4]],[[],["error",4]],[[],["dirichlet",3]],[[],["error",4]],[[],["beta",3]],[[],["triangular",3]],[[],["weibull",3]],[[],["error",4]],[[],["error",4]],[[],["betaerror",4]],[[],["error",4]],[[],["binomial",3]],[[],["weightedaliasindex",3]],[[],["standardnormal",3]],[[],["triangularerror",4]],[[],["pert",3]],[[],["lognormal",3]],[[],["unitdisc",3]],[[],["standardgeometric",3]],[[],["error",4]],[[],["hypergeometric",3]],[[],["normal",3]],[[],["error",4]],[[],["poisson",3]],[[],["error",4]],[[],["chisquarederror",4]],[[],["fisherf",3]],[[],["chisquared",3]],[[],["exp1",3]],[[],["geometric",3]],[[],["fisherferror",4]],[[],["perterror",4]],[[]],[[]],[[]],[[],["f32",15]],[[]],[[],["u64",15]],[[]],[[],[["vec",3],["global",3]]],[[],["f64",15]],[[]],[[],["f32",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[]],[[],["f64",15]],[[],["samplingstrategy",4]],[[],["f32",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["f32",15]],[[],["uniform",3]],[[],["uniform",3]],[[["vec",3],["global",3]],[["result",4],["weightedindex",3],["weightederror",4]]],[[],[["weightedindex",3],["weightederror",4],["result",4]]],[[],[["result",4],["weightederror",4]]],[[["f64",15]],[["result",4],["bernoulli",3],["bernoullierror",4]]],[[["u32",15]],[["result",4],["bernoulli",3],["bernoullierror",4]]],[[],["readrng",3]],[[["u64",15]],["reseedingrng",3]],[[],[["result",4],["error",3]]],[[["u64",15]],["steprng",3]],[[],["usize",15]],[[],["bool",15]],[[["usize",15]],["usize",15]],[[],[["vec",3],["usize",15],["global",3]]],[[],["indexveciter",4]],null,null,[[],["error",3]],[[],["error",8]],[[],[["error",8],["box",3],["global",3]]],[[],[["i32",15],["option",4]]],[[],[["option",4],["nonzerou32",3]]],[[["vec",3],["global",3]],[["weightederror",4],["result",4],["weightedaliasindex",3]]],[[["f64",15],["u64",15]],[["error",4],["result",4],["binomial",3]]],[[],[["result",4],["error",4],["cauchy",3]]],[[],[["result",4],["error",4],["dirichlet",3]]],[[["usize",15]],[["result",4],["error",4],["dirichlet",3]]],[[],[["exp",3],["result",4],["error",4]]],[[],[["result",4],["betaerror",4],["beta",3]]],[[],[["chisquarederror",4],["result",4],["chisquared",3]]],[[],[["fisherferror",4],["fisherf",3],["result",4]]],[[],[["error",4],["gamma",3],["result",4]]],[[],[["studentt",3],["result",4],["chisquarederror",4]]],[[["f64",15]],[["result",4],["geometric",3],["error",4]]],[[["u64",15]],[["error",4],["result",4],["hypergeometric",3]]],[[],[["error",4],["inversegaussian",3],["result",4]]],[[],[["error",4],["result",4],["lognormal",3]]],[[],[["error",4],["result",4],["lognormal",3]]],[[]],[[],[["normal",3],["error",4],["result",4]]],[[],[["normal",3],["error",4],["result",4]]],[[]],[[],[["error",4],["result",4],["normalinversegaussian",3]]],[[],[["result",4],["error",4],["pareto",3]]],[[],[["result",4],["pert",3],["perterror",4]]],[[],[["result",4],["pert",3],["perterror",4]]],[[],[["error",4],["result",4],["poisson",3]]],[[],[["triangular",3],["triangularerror",4],["result",4]]],[[],[["result",4],["weibull",3],["error",4]]]],"p":[[8,"SampleUniform"],[8,"UniformSampler"],[8,"SampleBorrow"],[8,"SampleRange"],[4,"WeightedError"],[8,"Distribution"],[4,"BernoulliError"],[8,"IteratorRandom"],[8,"SliceRandom"],[8,"Rng"],[8,"RngCore"],[8,"SeedableRng"],[8,"Fill"],[8,"AliasableWeight"],[4,"BinomialError"],[4,"CauchyError"],[4,"DirichletError"],[4,"ExpError"],[4,"BetaError"],[4,"ChiSquaredError"],[4,"GammaError"],[4,"FisherFError"],[4,"GeoError"],[4,"HyperGeoError"],[4,"InverseGaussianError"],[4,"NormalError"],[4,"NormalInverseGaussianError"],[4,"ParetoError"],[4,"PertError"],[4,"PoissonError"],[4,"TriangularError"],[4,"WeibullError"],[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingSub"],[8,"OverflowingMul"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingSub"],[8,"SaturatingMul"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"RandomExt"],[4,"SamplingStrategy"],[3,"F32"],[3,"Uniform"],[3,"UniformInt"],[3,"UniformChar"],[3,"UniformFloat"],[3,"UniformDuration"],[3,"WeightedIndex"],[3,"WeightedIndex"],[3,"DistIter"],[3,"Standard"],[3,"Bernoulli"],[3,"Open01"],[3,"OpenClosed01"],[3,"Alphanumeric"],[3,"SmallRng"],[3,"StdRng"],[3,"ThreadRng"],[3,"ReadError"],[3,"ReadRng"],[3,"ReseedingRng"],[3,"StepRng"],[3,"OsRng"],[4,"IndexVec"],[4,"IndexVecIter"],[4,"IndexVecIntoIter"],[3,"SliceChooseIter"],[3,"Error"],[3,"WeightedAliasIndex"],[3,"Binomial"],[3,"Cauchy"],[3,"Dirichlet"],[3,"Exp"],[3,"Exp1"],[3,"Beta"],[3,"ChiSquared"],[3,"FisherF"],[3,"Gamma"],[3,"StudentT"],[3,"Geometric"],[3,"StandardGeometric"],[3,"Hypergeometric"],[3,"InverseGaussian"],[3,"LogNormal"],[3,"Normal"],[3,"StandardNormal"],[3,"NormalInverseGaussian"],[3,"Pareto"],[3,"Pert"],[3,"Poisson"],[3,"Triangular"],[3,"UnitBall"],[3,"UnitCircle"],[3,"UnitDisc"],[3,"UnitSphere"],[3,"Weibull"]]},\
"num_complex":{"doc":"Complex numbers.","t":[3,12,12,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Complex","re","im","Complex32","Complex64","new","i","norm_sqr","scale","unscale","powu","conj","inv","powi","l1_norm","is_nan","is_infinite","is_finite","is_normal","ParseComplexError","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_string","fmt","fmt","fmt","fmt","fmt","fmt","div","div","div","div","rem","rem","rem","rem","sub","sub","sub","sub","eq","ne","eq","ne","add","add","add","add","mul","mul","mul","mul","neg","add_assign","add_assign","add_assign","add_assign","sub_assign","sub_assign","sub_assign","sub_assign","mul_assign","mul_assign","mul_assign","mul_assign","div_assign","div_assign","div_assign","div_assign","rem_assign","rem_assign","rem_assign","rem_assign","hash","from_str","fmt","fmt","fmt","fmt","sum","sum","product","product","from","from","clone","default","to_usize","to_isize","to_u8","to_u16","to_u32","to_u64","to_i8","to_i16","to_i32","to_i64","to_u128","to_i128","to_f32","to_f64","from_usize","from_isize","from_u8","from_u16","from_u32","from_u64","from_i8","from_i16","from_i32","from_i64","from_u128","from_i128","from_f32","from_f64","from","as_","from_str_radix","zero","is_zero","set_zero","one","is_one","set_one","inv","mul_add","mul_add_assign","mul_add_assign"],"q":["num_complex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A complex number in Cartesian form.","Real portion of the complex number","Imaginary portion of the complex number","","","Create a new Complex","Returns imaginary unit","Returns the square of the norm (since <code>T</code> doesn’t …","Multiplies <code>self</code> by the scalar <code>t</code>.","Divides <code>self</code> by the scalar <code>t</code>.","Raises <code>self</code> to an unsigned integer power.","Returns the complex conjugate. i.e. <code>re - i im</code>","Returns <code>1/self</code>","Raises <code>self</code> to a signed integer power.","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance…","Checks if the given complex number is NaN","Checks if the given complex number is infinite","Checks if the given complex number is finite","Checks if the given complex number is normal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","","",""],"i":[0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[]],[[]],[[["i32",15]]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["string",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["complex",3]]],[[]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[["complex",3]],["bool",15]],[[["complex",3]],["bool",15]],[[["parsecomplexerror",3]],["bool",15]],[[["parsecomplexerror",3]],["bool",15]],[[["complex",3]]],[[]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[],["complex",3]],[[],[["usize",15],["option",4]]],[[],[["option",4],["isize",15]]],[[],[["u8",15],["option",4]]],[[],[["u16",15],["option",4]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["i8",15],["option",4]]],[[],[["i16",15],["option",4]]],[[],[["i32",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["f32",15]]],[[],[["f64",15],["option",4]]],[[["usize",15]],["option",4]],[[["isize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["u128",15]],["option",4]],[[["i128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["toprimitive",8]],["option",4]],[[]],[[["u32",15],["str",15]],["result",4]],[[]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[["complex",3]],["complex",3]],[[["complex",3]]],[[["complex",3]]]],"p":[[3,"Complex"],[3,"ParseComplexError"]]},\
"num_integer":{"doc":"Integer trait and functions.","t":[8,10,11,11,5,5,5,8,10,10,5,5,8,10,10,11,10,10,11,11,11,10,10,10,10,10,11,11,11,3,12,12,12,5,5,5,5,5,5,5,5,3,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Roots","nth_root","sqrt","cbrt","cbrt","nth_root","sqrt","Average","average_ceil","average_floor","average_ceil","average_floor","Integer","div_floor","mod_floor","div_ceil","gcd","lcm","gcd_lcm","extended_gcd","extended_gcd_lcm","divides","is_multiple_of","is_even","is_odd","div_rem","div_mod_floor","next_multiple_of","prev_multiple_of","ExtendedGcd","gcd","x","y","div_rem","div_floor","mod_floor","div_mod_floor","div_ceil","gcd","lcm","gcd_lcm","IterBinomial","new","binomial","multinomial","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","fmt","eq","ne","next","clone","sqrt","cbrt"],"q":["num_integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Provides methods to compute an integer’s square root, …","Returns the truncated principal <code>n</code>th root of an integer –…","Returns the truncated principal square root of an integer …","Returns the truncated principal cube root of an integer …","Returns the truncated principal cube root of an integer …","Returns the truncated principal <code>n</code>th root of an integer –…","Returns the truncated principal square root of an integer …","Provides methods to compute the average of two integers, …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>…","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","","Floored integer division.","Floored integer modulo, satisfying:","Ceiled integer division.","Greatest Common Divisor (GCD).","Lowest Common Multiple (LCM).","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","Deprecated, use <code>is_multiple_of</code> instead.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is even.","Returns <code>true</code> if the number is odd.","Simultaneous truncated integer division and modulus. …","Simultaneous floored integer division and modulus. …","Rounds up to nearest multiple of argument.","Rounds down to nearest multiple of argument.","Greatest common divisor and Bézout coefficients","","","","Simultaneous integer division and modulus","Floored integer division","Floored integer modulus","Simultaneous floored integer division and modulus","Ceiled integer division","Calculates the Greatest Common Divisor (GCD) of the …","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Greatest Common Divisor (GCD) and Lowest …","An iterator over binomial coefficients.","For a given n, iterate over all binomial coefficients …","Calculate the binomial coefficient.","Calculate the multinomial coefficient.","","","","","","","","","","","","","","","","","","","","","","","Returns the truncated principal square root of an integer …","Returns the truncated principal cube root of an integer …"],"i":[0,1,1,1,0,0,0,0,2,2,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,4,4,4,0,0,0,0,0,0,0,0,0,5,0,0,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,4,4,4,5,4,1,1],"f":[null,[[["u32",15]]],[[]],[[]],[[["roots",8]],["roots",8]],[[["roots",8],["u32",15]],["roots",8]],[[["roots",8]],["roots",8]],null,[[]],[[]],[[["average",8]],["average",8]],[[["average",8]],["average",8]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["extendedgcd",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],null,null,null,null,[[["integer",8]]],[[["integer",8]],["integer",8]],[[["integer",8]],["integer",8]],[[["integer",8]]],[[["integer",8]],["integer",8]],[[["integer",8]],["integer",8]],[[["integer",8]],["integer",8]],[[["integer",8]]],null,[[],["iterbinomial",3]],[[["clone",8],["integer",8]],[["clone",8],["integer",8]]],[[],[["clone",8],["integer",8]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["extendedgcd",3]],["bool",15]],[[["extendedgcd",3]],["bool",15]],[[],["option",4]],[[],["extendedgcd",3]],[[]],[[]]],"p":[[8,"Roots"],[8,"Average"],[8,"Integer"],[3,"ExtendedGcd"],[3,"IterBinomial"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":[0,8,10,10,0,8,11,11,11,11,10,11,11,11,11,11,10,11,11,11,8,11,11,11,11,10,11,11,11,11,11,10,11,11,11,5,8,10,8,10,0,8,10,10,10,10,10,10,10,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,8,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,0,8,10,11,10,8,10,11,11,5,5,0,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,0,8,16,10,0,8,16,10,8,10,0,8,10,8,10,8,10,0,8,10,10,8,10,8,10,8,10,0,8,10,8,10,8,10,8,10,8,10,8,10,0,8,16,10,5,5,0,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,8,10,10,10,10,10,5,5,5,8,8,16,10,8,8,8,8,8,8,4,13,13,3,12,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["bounds","Bounded","min_value","max_value","cast","ToPrimitive","to_isize","to_i8","to_i16","to_i32","to_i64","to_i128","to_usize","to_u8","to_u16","to_u32","to_u64","to_u128","to_f32","to_f64","FromPrimitive","from_isize","from_i8","from_i16","from_i32","from_i64","from_i128","from_usize","from_u8","from_u16","from_u32","from_u64","from_u128","from_f32","from_f64","cast","NumCast","from","AsPrimitive","as_","float","FloatCore","infinity","neg_infinity","nan","neg_zero","min_value","min_positive_value","epsilon","max_value","is_nan","is_infinite","is_finite","is_normal","classify","floor","ceil","round","trunc","fract","abs","signum","is_sign_positive","is_sign_negative","min","max","recip","powi","to_degrees","to_radians","integer_decode","Float","nan","infinity","neg_infinity","neg_zero","min_value","min_positive_value","epsilon","max_value","is_nan","is_infinite","is_finite","is_normal","classify","floor","ceil","round","trunc","fract","abs","signum","is_sign_positive","is_sign_negative","mul_add","recip","powi","powf","sqrt","exp","exp2","ln","log","log2","log10","to_degrees","to_radians","max","min","abs_sub","cbrt","hypot","sin","cos","tan","asin","acos","atan","atan2","sin_cos","exp_m1","ln_1p","sinh","cosh","tanh","asinh","acosh","atanh","integer_decode","FloatConst","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","LN_10","LN_2","LOG10_E","LOG2_E","PI","SQRT_2","TAU","LOG10_2","LOG2_10","identities","Zero","zero","set_zero","is_zero","One","one","set_one","is_one","zero","one","int","PrimInt","count_ones","count_zeros","leading_zeros","trailing_zeros","rotate_left","rotate_right","signed_shl","signed_shr","unsigned_shl","unsigned_shr","swap_bytes","from_be","from_le","to_be","to_le","pow","ops","checked","CheckedAdd","checked_add","CheckedSub","checked_sub","CheckedMul","checked_mul","CheckedDiv","checked_div","CheckedRem","checked_rem","CheckedNeg","checked_neg","CheckedShl","checked_shl","CheckedShr","checked_shr","inv","Inv","Output","inv","mul_add","MulAdd","Output","mul_add","MulAddAssign","mul_add_assign","overflowing","OverflowingAdd","overflowing_add","OverflowingSub","overflowing_sub","OverflowingMul","overflowing_mul","saturating","Saturating","saturating_add","saturating_sub","SaturatingAdd","saturating_add","SaturatingSub","saturating_sub","SaturatingMul","saturating_mul","wrapping","WrappingAdd","wrapping_add","WrappingSub","wrapping_sub","WrappingMul","wrapping_mul","WrappingNeg","wrapping_neg","WrappingShl","wrapping_shl","WrappingShr","wrapping_shr","pow","Pow","Output","pow","pow","checked_pow","real","Real","min_value","min_positive_value","epsilon","max_value","floor","ceil","round","trunc","fract","abs","signum","is_sign_positive","is_sign_negative","mul_add","recip","powi","powf","sqrt","exp","exp2","ln","log","log2","log10","to_degrees","to_radians","max","min","abs_sub","cbrt","hypot","sin","cos","tan","asin","acos","atan","atan2","sin_cos","exp_m1","ln_1p","sinh","cosh","tanh","asinh","acosh","atanh","sign","Signed","abs","abs_sub","signum","is_positive","is_negative","abs","abs_sub","signum","Unsigned","Num","FromStrRadixErr","from_str_radix","NumOps","NumRef","RefNum","NumAssignOps","NumAssign","NumAssignRef","FloatErrorKind","Empty","Invalid","ParseFloatError","kind","clamp","clamp_min","clamp_max","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_string","fmt","fmt","fmt"],"q":["num_traits","num_traits::bounds","","","num_traits","num_traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits","num_traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits","num_traits::identities","","","","","","","","","","num_traits","num_traits::int","","","","","","","","","","","","","","","","","num_traits","num_traits::ops","num_traits::ops::checked","","","","","","","","","","","","","","","","num_traits::ops","num_traits::ops::inv","","","num_traits::ops","num_traits::ops::mul_add","","","","","num_traits::ops","num_traits::ops::overflowing","","","","","","num_traits::ops","num_traits::ops::saturating","","","","","","","","","num_traits::ops","num_traits::ops::wrapping","","","","","","","","","","","","num_traits","num_traits::pow","","","","","num_traits","num_traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits","num_traits::sign","","","","","","","","","","num_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Numbers which have upper and lower bounds","returns the smallest finite number this type can represent","returns the largest finite number this type can represent","","A generic trait for converting a value to a number.","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","A generic trait for converting a number to a value.","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts a <code>usize</code> to return an optional value of this …","Converts an <code>u8</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u128</code> to return an optional value of this …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Cast from one machine scalar to another.","An interface for casting between machine scalars.","Creates a number from another value that can be converted …","A generic interface for casting between machine scalars …","Convert a value to another, using the <code>as</code> operator.","","Generic trait for floating point numbers that works with …","Returns positive infinity.","Returns negative infinity.","Returns NaN.","Returns <code>-0.0</code>.","Returns the smallest finite value that this type can …","Returns the smallest positive, normalized value that this …","Returns epsilon, a small positive value.","Returns the largest finite value that this type can …","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns the floating point category of the number. If …","Returns the largest integer less than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the nearest integer to a number. Round half-way …","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of <code>self</code>. Returns …","Returns a number that represents the sign of <code>self</code>.","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns the minimum of the two numbers.","Returns the maximum of the two numbers.","Returns the reciprocal (multiplicative inverse) of the …","Raise a number to an integer power.","Converts to degrees, assuming the number is in radians.","Converts to radians, assuming the number is in degrees.","Returns the mantissa, base 2 exponent, and sign as …","Generic trait for floating point numbers","Returns the <code>NaN</code> value.","Returns the infinite value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns the smallest finite value that this type can …","Returns the smallest positive, normalized value that this …","Returns epsilon, a small positive value.","Returns the largest finite value that this type can …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns the floating point category of the number. If …","Returns the largest integer less than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the nearest integer to a number. Round half-way …","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Returns a number that represents the sign of <code>self</code>.","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Raise a number to an integer power.","Raise a number to a floating point power.","Take the square root of a number.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns the natural logarithm of the number.","Returns the logarithm of the number with respect to an …","Returns the base 2 logarithm of the number.","Returns the base 10 logarithm of the number.","Converts radians to degrees.","Converts degrees to radians.","Returns the maximum of the two numbers.","Returns the minimum of the two numbers.","The positive difference of two numbers.","Take the cubic root of a number.","Calculate the length of the hypotenuse of a right-angle …","Computes the sine of a number (in radians).","Computes the cosine of a number (in radians).","Computes the tangent of a number (in radians).","Computes the arcsine of a number. Return value is in …","Computes the arccosine of a number. Return value is in …","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Simultaneously computes the sine and cosine of the …","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Hyperbolic sine function.","Hyperbolic cosine function.","Hyperbolic tangent function.","Inverse hyperbolic sine function.","Inverse hyperbolic cosine function.","Inverse hyperbolic tangent function.","Returns the mantissa, base 2 exponent, and sign as …","","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Return <code>log10(2.0)</code>.","Return <code>log2(10.0)</code>.","","Defines an additive identity element for <code>Self</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Defines a multiplicative identity element for <code>Self</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns the additive identity, <code>0</code>.","Returns the multiplicative identity, <code>1</code>.","","Generic trait for primitive integers.","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of leading zeros in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Raises self to the power of <code>exp</code>, using exponentiation by …","","","Performs addition that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Performs subtraction that returns <code>None</code> instead of …","Subtracts two numbers, checking for underflow. If …","Performs multiplication that returns <code>None</code> instead of …","Multiplies two numbers, checking for underflow or …","Performs division that returns <code>None</code> instead of panicking …","Divides two numbers, checking for underflow, overflow and …","Performs an integral remainder that returns <code>None</code> instead …","Finds the remainder of dividing two numbers, checking for …","Performs negation that returns <code>None</code> if the result can’t …","Negates a number, returning <code>None</code> for results that can’t …","Performs a left shift that returns <code>None</code> on shifts larger …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Performs a right shift that returns <code>None</code> on shifts larger …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","The fused multiply-add assignment operation.","Performs the fused multiply-add operation.","","Performs addition with a flag for overflow.","Returns a tuple of the sum along with a boolean …","Performs substraction with a flag for overflow.","Returns a tuple of the difference along with a boolean …","Performs multiplication with a flag for overflow.","Returns a tuple of the product along with a boolean …","","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Saturating addition operator. Returns a+b, saturating at …","Saturating subtraction operator. Returns a-b, saturating …","Performs addition that saturates at the numeric bounds …","Saturating addition. Computes <code>self + other</code>, saturating at …","Performs subtraction that saturates at the numeric bounds …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs multiplication that saturates at the numeric …","Saturating multiplication. Computes <code>self * other</code>, …","","Performs addition that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Performs subtraction that wraps around on overflow.","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","Performs multiplication that wraps around on overflow.","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Performs a negation that does not panic.","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Performs a left shift that does not panic.","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …","Performs a right shift that does not panic.","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …","","Binary operator for raising a value to a power.","The result after applying the operator.","Returns <code>self</code> to the power <code>rhs</code>.","Raises a value to the power of exp, using exponentiation …","Raises a value to the power of exp, returning <code>None</code> if an …","","A trait for real number types that do not necessarily have…","Returns the smallest finite value that this type can …","Returns the smallest positive, normalized value that this …","Returns epsilon, a small positive value.","Returns the largest finite value that this type can …","Returns the largest integer less than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the nearest integer to a number. Round half-way …","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Returns a number that represents the sign of <code>self</code>.","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Raise a number to an integer power.","Raise a number to a real number power.","Take the square root of a number.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns the natural logarithm of the number.","Returns the logarithm of the number with respect to an …","Returns the base 2 logarithm of the number.","Returns the base 10 logarithm of the number.","Converts radians to degrees.","Converts degrees to radians.","Returns the maximum of the two numbers.","Returns the minimum of the two numbers.","The positive difference of two numbers.","Take the cubic root of a number.","Calculate the length of the hypotenuse of a right-angle …","Computes the sine of a number (in radians).","Computes the cosine of a number (in radians).","Computes the tangent of a number (in radians).","Computes the arcsine of a number. Return value is in …","Computes the arccosine of a number. Return value is in …","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Simultaneously computes the sine and cosine of the …","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Hyperbolic sine function.","Hyperbolic cosine function.","Hyperbolic tangent function.","Inverse hyperbolic sine function.","Inverse hyperbolic cosine function.","Inverse hyperbolic tangent function.","","Useful functions for signed numbers (i.e. numbers that …","Computes the absolute value.","The positive difference of two numbers.","Returns the sign of the number.","Returns true if the number is positive and false if the …","Returns true if the number is negative and false if the …","Computes the absolute value.","The positive difference of two numbers.","Returns the sign of the number.","A trait for values which cannot be negative","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…","","Convert from a string and radix (typically <code>2..=36</code>).","The trait for types implementing basic numeric operations","The trait for <code>Num</code> types which also implement numeric …","The trait for references which implement numeric …","The trait for types implementing numeric assignment …","The trait for <code>Num</code> types which also implement assignment …","The trait for <code>NumAssign</code> types which also implement …","","","","","","A value bounded by a minimum and a maximum","A value bounded by a minimum value","A value bounded by a maximum value","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,4,0,5,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,9,9,9,0,10,10,10,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,20,20,0,0,21,21,0,22,0,0,23,0,24,0,25,0,0,26,26,0,27,0,28,0,29,0,0,30,0,31,0,32,0,33,0,34,0,35,0,0,36,36,0,0,0,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,38,38,38,38,38,0,0,0,0,0,39,39,0,0,0,0,0,0,0,40,40,0,41,0,0,0,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,40,41,41],"f":[null,null,[[]],[[]],null,null,[[],[["option",4],["isize",15]]],[[],[["i8",15],["option",4]]],[[],[["i16",15],["option",4]]],[[],[["i32",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["usize",15],["option",4]]],[[],[["u8",15],["option",4]]],[[],[["u16",15],["option",4]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["f32",15]]],[[],[["f64",15],["option",4]]],null,[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i128",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["numcast",8]],[["numcast",8],["option",4]]],null,[[["toprimitive",8]],["option",4]],null,[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[],["bool",15]],null,[[]],[[]],[[],["bool",15]],[[],["zero",8]],[[],["one",8]],null,null,[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],null,null,null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[["u32",15]],["option",4]],null,[[["u32",15]],["option",4]],null,null,null,[[]],null,null,null,[[]],null,[[]],null,null,[[]],null,[[]],null,[[]],null,null,[[]],[[]],null,[[]],null,[[]],null,[[]],null,null,[[]],null,[[]],null,[[]],null,[[]],null,[[["u32",15]]],null,[[["u32",15]]],null,null,null,[[]],[[["usize",15],["mul",8],["one",8],["clone",8]],[["one",8],["clone",8],["mul",8]]],[[["usize",15],["checkedmul",8],["one",8],["clone",8]],[["checkedmul",8],["one",8],["option",4],["clone",8]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["signed",8]],["signed",8]],[[["signed",8]],["signed",8]],[[["signed",8]],["signed",8]],null,null,null,[[["u32",15],["str",15]],["result",4]],null,null,null,null,null,null,null,null,null,null,null,[[["partialord",8]],["partialord",8]],[[["partialord",8]],["partialord",8]],[[["partialord",8]],["partialord",8]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["string",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]]],"p":[[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingSub"],[8,"OverflowingMul"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingSub"],[8,"SaturatingMul"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"]]},\
"ppv_lite86":{"doc":"","t":[0,3,3,3,3,3,3,3,3,3,3,3,3,6,6,6,6,6,19,19,11,11,19,11,11,8,16,10,8,10,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,10,8,8,10,8,10,10,8,10,10,8,10,10,10,8,10,10,10,8,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,8,8,8,10,10,8,10,8,16,16,16,16,16,16,16,16,16,16,11,11,11,11,10,8,10,8,10,10,10,10,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["x86_64","YesS3","NoS3","YesS4","NoS4","YesA1","NoA1","YesA2","NoA2","YesNI","NoNI","SseMachine","Avx2Machine","SSE2","SSSE3","SSE41","AVX","AVX2","vec128_storage","vec256_storage","new128","split128","vec512_storage","new128","split128","AndNot","Output","andnot","BSwap","bswap","ArithOps","BitOps0","BitOps32","BitOps64","BitOps128","RotateEachWord32","rotate_each_word_right7","rotate_each_word_right8","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right25","RotateEachWord64","rotate_each_word_right32","RotateEachWord128","UnsafeFrom","unsafe_from","Vec2","extract","insert","Vec4","extract","insert","Words4","shuffle1230","shuffle2301","shuffle3012","LaneWords4","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","Swap64","swap1","swap2","swap4","swap8","swap16","swap32","swap64","u32x4","u64x2","u128x1","u32x4x2","u64x2x2","u64x4","u128x2","u32x4x4","u64x2x4","u128x4","MultiLane","to_lanes","from_lanes","VZip","vzip","Machine","u32x4","u64x2","u128x1","u32x4x2","u64x2x2","u64x4","u128x2","u32x4x4","u64x2x4","u128x4","unpack","vec","read_le","read_be","instance","Store","unpack","StoreBytes","unsafe_read_le","unsafe_read_be","write_le","write_be","dispatch","dispatch_light128","dispatch_light256","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","instance","instance","unpack","eq","eq","eq","into","into","into","into","into","into","into","into","into","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","unpack","vec","read_le","read_be"],"q":["ppv_lite86","ppv_lite86::x86_64","","","","","","","","","","","","","","","","","","","","","","","","ppv_lite86","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ppv_lite86::x86_64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ppv_lite86","","",""],"d":["","","","","","","","","","","","","","","","","AVX but not AVX2: only 128-bit integer operations, but …","","Generic wrapper for unparameterized storage of any of the …","","","","","","","","","","","","Ops that depend on word size","Ops that are independent of word size and endian","","","","","","","","","","","","","","","","","","A vector composed of two elements, which may be words or …","","","A vector composed of four elements, which may be words or …","","","A vector composed of four words; depending on their size, …","","","","A vector composed one or more lanes each composed of four …","","","","Exchange neigboring ranges of bits of the specified size","","","","","","","","","","","","","","","","","","A vector composed of multiple 128-bit lanes.","Split a multi-lane vector into single-lane vectors.","Build a multi-lane vector from individual lanes.","Combine single vectors into a multi-lane vector.","","","","","","","","","","","","","","","","","Safety","","Safety","","Safety","Safety","","","Generate the full set of optimized implementations to …","Generate only the basic implementations necessary to be …","Generate only the basic implementations necessary to be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,2,2,0,3,3,0,4,0,0,0,0,0,0,5,5,5,5,5,5,5,5,0,6,0,0,7,0,8,8,0,9,9,0,10,10,10,0,11,11,11,0,12,12,12,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,13,13,0,14,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,16,0,17,17,17,17,0,0,0,18,18,18,18,18,18,18,19,19,19,19,19,19,19,20,20,20,20,20,20,20,21,21,21,21,21,21,21,22,22,22,22,22,22,22,23,23,23,23,23,23,23,24,24,24,24,24,24,24,25,25,25,25,25,25,25,26,26,26,26,26,26,26,27,27,27,27,27,27,27,28,28,28,28,28,28,28,29,29,29,29,29,29,29,30,30,30,30,30,30,30,1,1,1,1,1,1,1,2,2,2,2,2,2,2,28,29,30,30,1,2,30,30,30,1,1,1,2,2,2,18,19,20,21,22,23,24,25,26,27,28,29,30,1,2,30,1,2,15,15,15,15],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,[[]],[[]],null,null,[[]],null,[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],null,null,[[]],null,[[["u32",15]]],[[["u32",15]]],null,[[["u32",15]]],[[["u32",15]]],null,[[]],[[]],[[]],null,[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,[[],["store",8]],[[]],[[]],[[]],[[]],null,[[]],null,[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[["vec128_storage",19]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["yess3",3]],[[],["nos3",3]],[[],["yess4",3]],[[],["nos4",3]],[[],["yesa1",3]],[[],["noa1",3]],[[],["yesa2",3]],[[],["noa2",3]],[[],["yesni",3]],[[],["noni",3]],[[],["ssemachine",3]],[[],["avx2machine",3]],[[],["vec128_storage",19]],[[],["vec256_storage",19]],[[],["vec512_storage",19]],[[]],[[]],[[]],[[],["store",8]],[[]],[[]],[[]]],"p":[[19,"vec256_storage"],[19,"vec512_storage"],[8,"AndNot"],[8,"BSwap"],[8,"RotateEachWord32"],[8,"RotateEachWord64"],[8,"UnsafeFrom"],[8,"Vec2"],[8,"Vec4"],[8,"Words4"],[8,"LaneWords4"],[8,"Swap64"],[8,"MultiLane"],[8,"VZip"],[8,"Machine"],[8,"Store"],[8,"StoreBytes"],[3,"YesS3"],[3,"NoS3"],[3,"YesS4"],[3,"NoS4"],[3,"YesA1"],[3,"NoA1"],[3,"YesA2"],[3,"NoA2"],[3,"YesNI"],[3,"NoNI"],[3,"SseMachine"],[3,"Avx2Machine"],[19,"vec128_storage"]]},\
"rand":{"doc":"Utilities for random number generation","t":[0,0,3,11,11,8,16,8,16,10,10,10,11,11,8,10,8,10,10,3,3,3,3,0,0,3,11,8,3,4,13,13,13,13,11,11,3,4,13,3,3,3,3,4,13,13,13,13,3,8,10,11,3,3,0,0,0,3,3,3,0,3,11,3,3,3,3,0,0,4,11,11,11,11,11,4,4,5,5,8,16,10,10,10,10,10,10,10,10,8,11,11,11,11,3,8,3,8,10,10,10,10,8,16,10,11,11,11,5,8,10,8,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,11,11,11,11,11],"n":["distributions","uniform","Uniform","new","new_inclusive","SampleUniform","Sampler","UniformSampler","X","new","new_inclusive","sample","sample_single","sample_single_inclusive","SampleBorrow","borrow","SampleRange","sample_single","is_empty","UniformInt","UniformChar","UniformFloat","UniformDuration","weighted","alias_method","WeightedIndex","new","Weight","WeightedIndex","WeightedError","NoItem","InvalidWeight","AllWeightsZero","TooMany","new","update_weights","Bernoulli","BernoulliError","InvalidProbability","Open01","OpenClosed01","Alphanumeric","Uniform","WeightedError","NoItem","InvalidWeight","AllWeightsZero","TooMany","WeightedIndex","Distribution","sample","sample_iter","DistIter","Standard","prelude","rngs","adapter","ReadError","ReadRng","ReseedingRng","mock","StepRng","new","SmallRng","StdRng","ThreadRng","OsRng","seq","index","IndexVec","len","is_empty","index","into_vec","iter","IndexVecIter","IndexVecIntoIter","sample","sample_weighted","SliceRandom","Item","choose","choose_mut","choose_multiple","choose_weighted","choose_weighted_mut","choose_multiple_weighted","shuffle","partial_shuffle","IteratorRandom","choose","choose_stable","choose_multiple_fill","choose_multiple","SliceChooseIter","CryptoRng","Error","RngCore","next_u32","next_u64","fill_bytes","try_fill_bytes","SeedableRng","Seed","from_seed","seed_from_u64","from_rng","from_entropy","thread_rng","Fill","try_fill","Rng","gen","gen_range","sample","sample_iter","fill","try_fill","gen_bool","gen_ratio","random","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","vzip","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","vzip","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_string","vzip","default","fmt","fmt","fmt","read","clone","from","from","source","next_u32","next_u64","fill_bytes","try_fill_bytes","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","new","new_inclusive","sample","sample_single","new","new_inclusive","sample","sample_single","new","new_inclusive","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","eq","eq","ne","eq","ne","eq","ne","eq","len","next","size_hint","next","size_hint","next","size_hint","next","size_hint","into_iter","from","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","source","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","from_seed","from_rng","from_seed","from_rng","new","from_ratio","gen","gen_range","sample","sample_iter","fill","try_fill","gen_bool","gen_ratio","new","new","reseed","CUSTOM_START","INTERNAL_START","new","inner","take_inner","raw_os_error","code"],"q":["rand","rand::distributions","rand::distributions::uniform","","","","","","","","","","","","","","","","","","","","","rand::distributions","rand::distributions::weighted","rand::distributions::weighted::alias_method","","","rand::distributions::weighted","","","","","","","","rand::distributions","","","","","","","","","","","","","","","","","","rand","","rand::rngs","rand::rngs::adapter","","","rand::rngs","rand::rngs::mock","","rand::rngs","","","","rand","rand::seq","rand::seq::index","","","","","","","","","","rand::seq","","","","","","","","","","","","","","","","rand","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions::uniform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions::weighted::alias_method","","","","","","","","rand::distributions::weighted","","","","","","","","","","","","","","","","","","","","","rand::distributions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::rngs::adapter","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::rngs::mock","","","","","","","","","","rand::rngs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::seq::index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::seq","","","","","","","","","rand","","","","","","","","","rand::rngs","rand","","rand::rngs","rand","rand::rngs","rand","","","rand::rngs","","","","rand::distributions::uniform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions","","rand::distributions::weighted","rand::distributions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions::uniform","","","","rand::distributions::weighted::alias_method","rand::distributions::weighted","","rand::distributions","","","","","rand::rngs::adapter","","","rand::rngs::mock","rand::rngs","","","rand::seq::index","","","rand::seq","rand::distributions","rand::distributions::weighted","rand::rngs::adapter","rand::distributions","rand::distributions::weighted","rand::rngs::mock","","rand::rngs","","","","rand::seq::index","rand::seq","rand::distributions","","rand::seq::index","","","","rand::seq","","rand::seq::index","rand::distributions","","rand::seq::index","","rand::distributions","","","rand::distributions::uniform","","","","rand::distributions::weighted","","rand::distributions","","","rand::rngs::adapter","rand::rngs::mock","rand::rngs","","","rand::seq::index","","rand::rngs","rand::rngs::adapter","","","","","","","","","rand::rngs::mock","","","","rand::rngs","","","","","","","","","","","","","","","","rand::distributions","","rand","","","","","","","","rand::rngs::adapter","","","rand","","","","","",""],"d":["Generating random samples from probability distributions","A distribution uniformly sampling numbers within a given …","Sample values uniformly between two bounds.","Create a new <code>Uniform</code> instance which samples uniformly …","Create a new <code>Uniform</code> instance which samples uniformly …","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Construct self, with inclusive lower bound and exclusive …","Construct self, with inclusive bounds <code>[low, high]</code>.","Sample a value.","Sample a single value uniformly from a range with …","Sample a single value uniformly from a range with …","Helper trait similar to <code>Borrow</code> but implemented only for …","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","Range that supports generating a single sample …","Generate a sample from the given range.","Check whether the range is empty.","The back-end implementing [<code>UniformSampler</code>] for integer …","The back-end implementing [<code>UniformSampler</code>] for <code>char</code>.","The back-end implementing [<code>UniformSampler</code>] for …","The back-end implementing [<code>UniformSampler</code>] for <code>Duration</code>.","Weighted index sampling","","","","","A distribution using weighted sampling of discrete items","Error type returned from <code>WeightedIndex::new</code>.","The provided weight collection contains no items.","A weight is either less than zero, greater than the …","All items in the provided weight collection are zero.","Too many weights are provided (length greater than …","Creates a new a <code>WeightedIndex</code> [<code>Distribution</code>] using the …","Update a subset of weights, without changing the number …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","<code>p < 0</code> or <code>p > 1</code>.","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …","Sample values uniformly between two bounds.","Error type returned from <code>WeightedIndex::new</code>.","The provided weight collection contains no items.","A weight is either less than zero, greater than the …","All items in the provided weight collection are zero.","Too many weights are provided (length greater than …","A distribution using weighted sampling of discrete items","Types (distributions) that can be used to create a random …","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","Create an iterator that generates random values of <code>T</code>, …","An iterator that generates random values of <code>T</code> with …","A generic random value distribution, implemented for many …","Convenience re-export of common members","Random number generators and adapters","Wrappers / adapters forming RNGs","<code>ReadRng</code> error type","An RNG that reads random bytes straight from any type …","A wrapper around any PRNG that implements <code>BlockRngCore</code>, …","Mock random number generator","A simple implementation of <code>RngCore</code> for testing purposes.","Create a <code>StepRng</code>, yielding an arithmetic sequence …","A small-state, fast non-crypto PRNG","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","A random number generator that retrieves randomness from …","Sequence-related functionality","Low-level API for sampling indices","A vector of indices.","Returns the number of indices","Returns <code>true</code> if the length is 0.","Return the value at the given <code>index</code>.","Return result as a <code>Vec<usize></code>. Conversion may or may not …","Iterate over the indices as a sequence of <code>usize</code> values","Return type of <code>IndexVec::iter</code>.","Return type of <code>IndexVec::into_iter</code>.","Randomly sample exactly <code>amount</code> distinct indices from …","Randomly sample exactly <code>amount</code> distinct indices from …","Extension trait on slices, providing random mutation and …","The element type.","Returns a reference to one random element of the slice, …","Returns a mutable reference to one random element of the …","Chooses <code>amount</code> elements from the slice at random, without …","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Shuffle a mutable slice in place.","Shuffle a slice in place, but exit early.","Extension trait on iterators, providing random sampling …","Choose one element at random from the iterator.","Choose one element at random from the iterator.","Collects values at random from the iterator into a …","Collects <code>amount</code> values at random from the iterator into a …","An iterator over multiple slice elements.","A marker trait used to indicate that an [<code>RngCore</code>] or …","Error type of random number generators","The core of a random number generator.","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Fill <code>dest</code> with random data.","Fill <code>dest</code> entirely with random data.","A random number generator that can be explicitly seeded.","Seed type, which is restricted to types …","Create a new PRNG using the given seed.","Create a new PRNG using a <code>u64</code> seed.","Create a new PRNG seeded from another <code>Rng</code>.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Retrieve the lazily-initialized thread-local random …","Types which may be filled with random data","Fill self with random data","An automatically-implemented extension trait on [<code>RngCore</code>] …","Return a random value supporting the <code>Standard</code> …","Generate a random value in the given range.","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Fill any type implementing [<code>Fill</code>] with random data","Fill any type implementing <code>Fill</code> with random data","Return a bool with a probability <code>p</code> of being true.","Return a bool with a probability of <code>numerator/denominator</code> …","Generates a random value using the thread-local random …onvert into an iterator over the indices as a sequence …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct a new <code>Bernoulli</code> with the given probability of …","Construct a new <code>Bernoulli</code> with the probability of success …","Return a random value supporting the <code>Standard</code> …","Generate a random value in the given range.","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Fill any type implementing [<code>Fill</code>] with random data","Fill any type implementing <code>Fill</code> with random data","Return a bool with a probability <code>p</code> of being true.","Return a bool with a probability of <code>numerator/denominator</code> …","Create a new <code>ReadRng</code> from a <code>Read</code>.","Create a new <code>ReseedingRng</code> from an existing PRNG, combined …","Reseed the internal PRNG.","Codes at or above this point can be used by users to …","Codes below this point represent OS Errors (i.e. positive …","Construct from any type supporting <code>std::error::Error</code>","Reference the inner error (<code>std</code> only)","Unwrap the inner error (<code>std</code> only)","Extract the raw OS error code (if this error came from …","Retrieve the error code, if any."],"i":[0,0,0,1,1,0,2,0,3,3,3,3,3,3,0,4,0,5,5,0,0,0,0,0,0,0,6,0,0,0,7,7,7,7,8,8,0,0,9,0,0,0,0,0,7,7,7,7,0,0,10,10,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,12,12,12,12,12,0,0,0,0,0,13,13,13,13,13,13,13,13,13,0,14,14,14,14,0,0,0,0,15,15,15,15,0,16,16,16,16,16,0,0,17,0,18,18,18,18,18,18,18,18,0,19,19,19,19,19,19,19,19,19,19,9,9,9,9,9,9,9,9,9,9,9,1,1,1,1,1,1,1,1,1,1,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,11,11,11,11,11,11,11,11,11,11,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,12,12,12,12,12,12,12,12,12,12,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,35,39,39,35,15,35,39,39,39,35,35,35,35,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,22,22,22,22,22,22,22,22,23,23,23,19,1,8,28,24,25,28,24,25,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,26,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,19,9,1,20,21,22,23,6,8,7,24,25,26,27,28,29,30,31,11,32,33,34,12,36,37,38,9,7,30,9,7,11,11,32,32,33,33,12,38,27,27,36,36,37,37,38,38,12,1,1,12,12,19,9,1,20,21,22,23,8,7,24,25,28,31,11,32,33,34,12,37,34,30,29,29,29,29,31,31,31,31,11,11,11,11,32,32,32,32,33,33,33,33,34,34,34,34,32,32,33,33,19,19,18,18,18,18,18,18,18,18,29,31,31,39,39,39,39,39,39,39],"f":[null,null,null,[[],["uniform",3]],[[],["uniform",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,[[]],null,[[]],[[],["bool",15]],null,null,null,null,null,null,null,[[["vec",3]],[["result",4],["weightederror",4]]],null,null,null,null,null,null,null,[[],[["result",4],["weightedindex",3],["weightederror",4]]],[[],[["result",4],["weightederror",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["distiter",3]],null,null,null,null,null,null,null,null,null,null,[[["u64",15]]],null,null,null,null,null,null,null,[[],["usize",15]],[[],["bool",15]],[[["usize",15]],["usize",15]],[[],[["usize",15],["vec",3]]],[[],["indexveciter",4]],null,null,[[["usize",15]],["indexvec",4]],[[["usize",15]],[["indexvec",4],["result",4],["weightederror",4]]],null,null,[[],["option",4]],[[],["option",4]],[[["usize",15]],["slicechooseiter",3]],[[],[["result",4],["weightederror",4]]],[[],[["weightederror",4],["result",4]]],[[["usize",15]],[["weightederror",4],["result",4],["slicechooseiter",3]]],[[]],[[["usize",15]]],null,[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[["usize",15]],["vec",3]],null,null,null,null,[[],["u32",15]],[[],["u64",15]],[[]],[[],[["error",3],["result",4]]],null,null,[[]],[[["u64",15]]],[[],[["error",3],["result",4]]],[[]],[[],["threadrng",3]],null,[[],[["result",4],["error",3]]],null,[[]],[[]],[[["distribution",8]]],[[],["distiter",3]],[[]],[[],[["result",4],["error",3]]],[[["f64",15]],["bool",15]],[[["u32",15]],["bool",15]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["string",3]],[[]],[[],["osrng",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],[["result",4],["usize",15],["error",3]]],[[],["osrng",3]],[[["error",3]],["error",3]],[[["nonzerou32",3]],["error",3]],[[],[["option",4],["error",8]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["duration",3]],[[],["bool",15]],[[]],[[],["usize",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["u8",15]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["u128",15]],[[],["usize",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["i128",15]],[[],["isize",15]],[[],["nonzerou8",3]],[[],["nonzerou16",3]],[[],["nonzerou32",3]],[[],["nonzerou64",3]],[[],["nonzerou128",3]],[[],["nonzerousize",3]],[[],["char",15]],[[],["u8",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["wrapping",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["bernoullierror",4]],["bool",15]],[[["weightederror",4]],["bool",15]],[[["steprng",3]],["bool",15]],[[["steprng",3]],["bool",15]],[[["smallrng",3]],["bool",15]],[[["smallrng",3]],["bool",15]],[[["stdrng",3]],["bool",15]],[[["stdrng",3]],["bool",15]],[[["indexvec",4]],["bool",15]],[[],["usize",15]],[[],["option",4]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["indexvecintoiter",4]],[[["range",3]],["uniform",3]],[[["rangeinclusive",3]],["uniform",3]],[[["vec",3],["u32",15]]],[[["usize",15],["vec",3]]],[[],["bernoulli",3]],[[],["bernoullierror",4]],[[],["uniform",3]],[[],["uniformint",3]],[[],["uniformchar",3]],[[],["uniformfloat",3]],[[],["uniformduration",3]],[[],["weightedindex",3]],[[],["weightederror",4]],[[],["openclosed01",3]],[[],["open01",3]],[[],["standard",3]],[[],["reseedingrng",3]],[[],["steprng",3]],[[],["smallrng",3]],[[],["stdrng",3]],[[],["threadrng",3]],[[],["indexvec",4]],[[],["indexvecintoiter",4]],[[],["threadrng",3]],[[],[["error",8],["option",4]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[]],[[["rngcore",8]],[["error",3],["result",4]]],[[]],[[["rngcore",8]],[["error",3],["result",4]]],[[["f64",15]],[["bernoullierror",4],["bernoulli",3],["result",4]]],[[["u32",15]],[["bernoullierror",4],["bernoulli",3],["result",4]]],[[]],[[]],[[["distribution",8]]],[[],["distiter",3]],[[]],[[],[["result",4],["error",3]]],[[["f64",15]],["bool",15]],[[["u32",15]],["bool",15]],[[],["readrng",3]],[[["u64",15]]],[[],[["result",4],["error",3]]],null,null,[[],["error",3]],[[],["error",8]],[[],[["box",3],["global",3],["error",8]]],[[],[["i32",15],["option",4]]],[[],[["nonzerou32",3],["option",4]]]],"p":[[3,"Uniform"],[8,"SampleUniform"],[8,"UniformSampler"],[8,"SampleBorrow"],[8,"SampleRange"],[3,"WeightedIndex"],[4,"WeightedError"],[3,"WeightedIndex"],[4,"BernoulliError"],[8,"Distribution"],[3,"StepRng"],[4,"IndexVec"],[8,"SliceRandom"],[8,"IteratorRandom"],[8,"RngCore"],[8,"SeedableRng"],[8,"Fill"],[8,"Rng"],[3,"Bernoulli"],[3,"UniformInt"],[3,"UniformChar"],[3,"UniformFloat"],[3,"UniformDuration"],[3,"OpenClosed01"],[3,"Open01"],[3,"Alphanumeric"],[3,"DistIter"],[3,"Standard"],[3,"ReadRng"],[3,"ReadError"],[3,"ReseedingRng"],[3,"SmallRng"],[3,"StdRng"],[3,"ThreadRng"],[3,"OsRng"],[4,"IndexVecIter"],[4,"IndexVecIntoIter"],[3,"SliceChooseIter"],[3,"Error"]]},\
"rand_chacha":{"doc":"The ChaCha random number generator.","t":[3,3,3,3,3,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ChaCha12Core","ChaCha12Rng","ChaCha20Core","ChaCha20Rng","ChaCha8Core","ChaCha8Rng","ChaChaRng","ChaChaCore","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","from","from","clone","clone","clone","clone","clone","clone","eq","ne","eq","eq","ne","eq","eq","ne","eq","fmt","fmt","fmt","fmt","fmt","fmt","generate","generate","generate","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","from_seed","from_seed","from_seed","from_seed","from_seed","from_seed","get_word_pos","set_word_pos","set_stream","get_word_pos","set_word_pos","set_stream","get_word_pos","set_word_pos","set_stream"],"q":["rand_chacha","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["ChaCha with 12 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds","A cryptographically secure random number generator that …","ChaCha with 8 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds","ChaCha with 20 rounds, low-level interface","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","Set the stream number.","Get the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","Set the stream number.","Get the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","Set the stream number."],"i":[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,2,4,6,1,2,3,4,5,6,1,1,2,3,3,4,5,5,6,1,2,3,4,5,6,1,3,5,2,2,2,2,4,4,4,4,6,6,6,6,1,2,3,4,5,6,2,2,2,4,4,4,6,6,6],"f":[null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["chacha20core",3]]],[[["chacha12core",3]]],[[["chacha8core",3]]],[[],["chacha20core",3]],[[],["chacha20rng",3]],[[],["chacha12core",3]],[[],["chacha12rng",3]],[[],["chacha8core",3]],[[],["chacha8rng",3]],[[["chacha20core",3]],["bool",15]],[[["chacha20core",3]],["bool",15]],[[["chacha20rng",3]],["bool",15]],[[["chacha12core",3]],["bool",15]],[[["chacha12core",3]],["bool",15]],[[["chacha12rng",3]],["bool",15]],[[["chacha8core",3]],["bool",15]],[[["chacha8core",3]],["bool",15]],[[["chacha8rng",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u128",15]],[[["u128",15]]],[[["u64",15]]],[[],["u128",15]],[[["u128",15]]],[[["u64",15]]],[[],["u128",15]],[[["u128",15]]],[[["u64",15]]]],"p":[[3,"ChaCha20Core"],[3,"ChaCha20Rng"],[3,"ChaCha12Core"],[3,"ChaCha12Rng"],[3,"ChaCha8Core"],[3,"ChaCha8Rng"]]},\
"rand_core":{"doc":"Random number generation traits","t":[0,8,16,16,10,3,12,11,11,11,11,3,12,11,11,11,11,0,5,5,5,5,5,5,0,5,5,3,3,8,10,10,10,10,8,8,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,11,11,11,11,11],"n":["block","BlockRngCore","Item","Results","generate","BlockRng","core","new","index","reset","generate_and_set","BlockRng64","core","new","index","reset","generate_and_set","impls","next_u64_via_u32","fill_bytes_via_next","fill_via_u32_chunks","fill_via_u64_chunks","next_u32_via_fill","next_u64_via_fill","le","read_u32_into","read_u64_into","Error","OsRng","RngCore","next_u32","next_u64","fill_bytes","try_fill_bytes","CryptoRng","SeedableRng","Seed","from_seed","seed_from_u64","from_rng","from_entropy","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_string","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","from_seed","seed_from_u64","from_rng","from_seed","seed_from_u64","from_rng","fmt","fmt","fmt","fmt","fmt","from","from","clone","clone","clone","default","source","read","CUSTOM_START","INTERNAL_START","new","inner","take_inner","raw_os_error","code"],"q":["rand_core","rand_core::block","","","","","","","","","","","","","","","","rand_core","rand_core::impls","","","","","","rand_core","rand_core::le","","rand_core","","","","","","","","","","","","","","rand_core::block","","","","","","","","","","","","","","","","","","rand_core","","","","","","","","","","","","","","","","","rand_core::block","","","","","","","","rand_core","","","","rand_core::block","","","","","","","","rand_core","","","","","rand_core::block","","rand_core","","","","","","","","","",""],"d":["The <code>BlockRngCore</code> trait and implementation helpers","A trait for RNGs which do not generate random numbers …","Results element type, e.g. <code>u32</code>.","Results type. This is the ‘block’ an RNG implementing …","Generate a new block of results.","A wrapper type implementing [<code>RngCore</code>] for some type …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","Create a new <code>BlockRng</code> from an existing RNG implementing …","Get the index into the result buffer.","Reset the number of available results. This will force a …","Generate a new set of results immediately, setting the …","A wrapper type implementing [<code>RngCore</code>] for some type …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","Create a new <code>BlockRng</code> from an existing RNG implementing …","Get the index into the result buffer.","Reset the number of available results. This will force a …","Generate a new set of results immediately, setting the …","Helper functions for implementing <code>RngCore</code> functions.","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.","Little-Endian utilities","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","Error type of random number generators","A random number generator that retrieves randomness from …","The core of a random number generator.","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Fill <code>dest</code> with random data.","Fill <code>dest</code> entirely with random data.","A marker trait used to indicate that an [<code>RngCore</code>] or …","A random number generator that can be explicitly seeded.","Seed type, which is restricted to types …","Create a new PRNG using the given seed.","Create a new PRNG using a <code>u64</code> seed.","Create a new PRNG seeded from another <code>Rng</code>.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Codes at or above this point can be used by users to …","Codes below this point represent OS Errors (i.e. positive …","Construct from any type supporting <code>std::error::Error</code>","Reference the inner error (<code>std</code> only)","Unwrap the inner error (<code>std</code> only)","Extract the raw OS error code (if this error came from …","Retrieve the error code, if any."],"i":[0,0,1,1,1,0,2,2,2,2,2,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,0,0,5,5,5,5,5,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,2,2,2,2,3,3,3,3,7,7,7,7,2,2,2,3,3,3,2,3,6,7,6,6,6,2,3,7,7,6,4,6,6,6,6,6,6,6],"f":[null,null,null,null,[[]],null,null,[[],["blockrng",3]],[[],["usize",15]],[[]],[[["usize",15]]],null,null,[[],["blockrng64",3]],[[],["usize",15]],[[]],[[["usize",15]]],null,[[],["u64",15]],[[]],[[]],[[]],[[],["u32",15]],[[],["u64",15]],null,[[]],[[]],null,null,null,[[],["u32",15]],[[],["u64",15]],[[]],[[],[["error",3],["result",4]]],null,null,null,[[]],[[["u64",15]]],[[["rngcore",8]],[["result",4],["error",3]]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["error",3],["result",4]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["error",3],["result",4]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["error",3],["result",4]]],[[]],[[["u64",15]]],[[["rngcore",8]],[["result",4],["error",3]]],[[]],[[["u64",15]]],[[["rngcore",8]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["nonzerou32",3]]],[[["error",3]]],[[],["blockrng",3]],[[],["blockrng64",3]],[[],["osrng",3]],[[],["osrng",3]],[[],[["option",4],["error",8]]],[[],[["usize",15],["result",4],["error",3]]],null,null,[[]],[[],["error",8]],[[],[["error",8],["box",3]]],[[],[["i32",15],["option",4]]],[[],[["option",4],["nonzerou32",3]]]],"p":[[8,"BlockRngCore"],[3,"BlockRng"],[3,"BlockRng64"],[8,"RngCore"],[8,"SeedableRng"],[3,"Error"],[3,"OsRng"]]},\
"rand_distr":{"doc":"Generating random samples from probability distributions.","t":[0,3,11,8,18,18,10,11,0,3,8,16,8,16,10,10,10,11,11,8,10,8,10,10,3,3,3,3,3,3,4,13,3,8,10,11,3,3,3,3,3,4,13,13,3,4,13,3,4,13,13,13,4,13,3,3,3,4,13,13,3,4,13,4,13,13,13,3,4,13,13,3,3,4,13,3,3,4,13,13,13,3,3,4,13,13,4,13,13,3,3,3,3,4,13,13,4,13,13,3,3,4,13,13,13,4,13,3,3,4,13,13,3,3,3,3,4,13,13,3,4,13,13,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["weighted_alias","WeightedAliasIndex","new","AliasableWeight","MAX","ZERO","try_from_u32_lossy","sum","uniform","Uniform","SampleUniform","Sampler","UniformSampler","X","new","new_inclusive","sample","sample_single","sample_single_inclusive","SampleBorrow","borrow","SampleRange","sample_single","is_empty","UniformInt","UniformChar","UniformFloat","UniformDuration","Alphanumeric","Bernoulli","BernoulliError","InvalidProbability","DistIter","Distribution","sample","sample_iter","Open01","OpenClosed01","Standard","Uniform","Binomial","BinomialError","ProbabilityTooSmall","ProbabilityTooLarge","Cauchy","CauchyError","ScaleTooSmall","Dirichlet","DirichletError","AlphaTooShort","AlphaTooSmall","SizeTooSmall","ExpError","LambdaTooSmall","Exp","Exp1","Beta","BetaError","AlphaTooSmall","BetaTooSmall","ChiSquared","ChiSquaredError","DoFTooSmall","GammaError","ShapeTooSmall","ScaleTooSmall","ScaleTooLarge","FisherF","FisherFError","MTooSmall","NTooSmall","Gamma","StudentT","GeoError","InvalidProbability","Geometric","StandardGeometric","HyperGeoError","PopulationTooLarge","ProbabilityTooLarge","SampleSizeTooLarge","Hypergeometric","InverseGaussian","InverseGaussianError","MeanNegativeOrNull","ShapeNegativeOrNull","NormalError","MeanTooSmall","BadVariance","LogNormal","Normal","StandardNormal","NormalInverseGaussian","NormalInverseGaussianError","AlphaNegativeOrNull","AbsoluteBetaNotLessThanAlpha","ParetoError","ScaleTooSmall","ShapeTooSmall","Pareto","Pert","PertError","RangeTooSmall","ModeRange","ShapeTooSmall","PoissonError","ShapeTooSmall","Poisson","Triangular","TriangularError","RangeTooSmall","ModeRange","UnitBall","UnitCircle","UnitDisc","UnitSphere","WeibullError","ScaleTooSmall","ShapeTooSmall","Weibull","WeightedError","NoItem","InvalidWeight","AllWeightsZero","TooMany","WeightedIndex","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","eq","eq","from","from","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","next","size_hint","fmt","fmt","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","new","new_inclusive","sample","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","new","new","new","new_with_size","new","new","new","new","new","new","new","new","new","new","from_mean_cv","from_zscore","new","from_mean_cv","from_zscore","new","new","new","new_with_shape","new","new","new","new","new_inclusive","new","from_ratio","new","update_weights"],"q":["rand_distr","rand_distr::weighted_alias","","","","","","","rand_distr","rand_distr::uniform","","","","","","","","","","","","","","","","","","","rand_distr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_distr::weighted_alias","","","","","","","","","","rand_distrrand_distr::uniform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_distr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_distr::uniform","rand_distr","","rand_distr::uniform","rand_distr","rand_distr::uniform","rand_distr","rand_distr::uniform","rand_distr","","","","","","","rand_distr::uniform","rand_distr","","","","rand_distr::uniform","","rand_distr","","rand_distr::uniform","rand_distr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_distr::uniform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_distr::weighted_alias","rand_distr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_distr::weighted_alias","rand_distr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_distr::weighted_alias","rand_distr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This module contains an implementation of alias method …","A distribution using weighted sampling to pick a …","Creates a new [<code>WeightedAliasIndex</code>].","Trait that must be implemented for weights, that are used …","Maximum number representable by <code>Self</code>.","Element of <code>Self</code> equivalent to 0.","Produce an instance of <code>Self</code> from a <code>u32</code> value, or return …","Sums all values in slice <code>values</code>.","A distribution uniformly sampling numbers within a given …","Sample values uniformly between two bounds.","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Construct self, with inclusive lower bound and exclusive …","Construct self, with inclusive bounds <code>[low, high]</code>.","Sample a value.","Sample a single value uniformly from a range with …","Sample a single value uniformly from a range with …","Helper trait similar to <code>Borrow</code> but implemented only for …","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","Range that supports generating a single sample …","Generate a sample from the given range.","Check whether the range is empty.","The back-end implementing [<code>UniformSampler</code>] for integer …","The back-end implementing [<code>UniformSampler</code>] for <code>char</code>.","The back-end implementing [<code>UniformSampler</code>] for …","The back-end implementing [<code>UniformSampler</code>] for <code>Duration</code>.","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","<code>p < 0</code> or <code>p > 1</code>.","An iterator that generates random values of <code>T</code> with …","Types (distributions) that can be used to create a random …","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","Create an iterator that generates random values of <code>T</code>, …","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","A generic random value distribution, implemented for many …","Sample values uniformly between two bounds.","The binomial distribution <code>Binomial(n, p)</code>.","Error type returned from <code>Binomial::new</code>.","<code>p < 0</code> or <code>nan</code>.","<code>p > 1</code>.","The Cauchy distribution <code>Cauchy(median, scale)</code>.","Error type returned from <code>Cauchy::new</code>.","<code>scale <= 0</code> or <code>nan</code>.","The Dirichlet distribution <code>Dirichlet(alpha)</code>.","Error type returned from <code>Dirchlet::new</code>.","<code>alpha.len() < 2</code>.","<code>alpha <= 0.0</code> or <code>nan</code>.","<code>size < 2</code>.","Error type returned from <code>Exp::new</code>.","<code>lambda < 0</code> or <code>nan</code>.","The exponential distribution <code>Exp(lambda)</code>.","Samples floating-point numbers according to the …","The Beta distribution with shape parameters <code>alpha</code> and <code>beta</code>…","Error type returned from <code>Beta::new</code>.","<code>alpha <= 0</code> or <code>nan</code>.","<code>beta <= 0</code> or <code>nan</code>.","The chi-squared distribution <code>χ²(k)</code>, where <code>k</code> is the …","Error type returned from <code>ChiSquared::new</code> and <code>StudentT::new</code>…","<code>0.5 * k <= 0</code> or <code>nan</code>.","Error type returned from <code>Gamma::new</code>.","<code>shape <= 0</code> or <code>nan</code>.","<code>scale <= 0</code> or <code>nan</code>.","<code>1 / scale == 0</code>.","The Fisher F distribution <code>F(m, n)</code>.","Error type returned from <code>FisherF::new</code>.","<code>m <= 0</code> or <code>nan</code>.","<code>n <= 0</code> or <code>nan</code>.","The Gamma distribution <code>Gamma(shape, scale)</code> distribution.","The Student t distribution, <code>t(nu)</code>, where <code>nu</code> is the …","Error type returned from <code>Geometric::new</code>.","<code>p < 0 || p > 1</code> or <code>nan</code>","The geometric distribution <code>Geometric(p)</code> bounded to …","Samples integers according to the geometric distribution …","Error type returned from <code>Hypergeometric::new</code>.","<code>total_population_size</code> is too large, causing floating …","<code>population_with_feature > total_population_size</code>.","<code>sample_size > total_population_size</code>.","The hypergeometric distribution <code>Hypergeometric(N, K, n)</code>.","The inverse Gaussian distribution","Error type returned from <code>InverseGaussian::new</code>","<code>mean <= 0</code> or <code>nan</code>.","<code>shape <= 0</code> or <code>nan</code>.","Error type returned from <code>Normal::new</code> and <code>LogNormal::new</code>.","The mean value is too small (log-normal samples must be …","The standard deviation or other dispersion parameter is …","The log-normal distribution <code>ln N(mean, std_dev**2)</code>.","The normal distribution <code>N(mean, std_dev**2)</code>.","Samples floating-point numbers according to the normal …","The normal-inverse Gaussian distribution","Error type returned from <code>NormalInverseGaussian::new</code>","<code>alpha <= 0</code> or <code>nan</code>.","<code>|beta| >= alpha</code> or <code>nan</code>.","Error type returned from <code>Pareto::new</code>.","<code>scale <= 0</code> or <code>nan</code>.","<code>shape <= 0</code> or <code>nan</code>.","Samples floating-point numbers according to the Pareto …","The PERT distribution.","Error type returned from [<code>Pert</code>] constructors.","<code>max < min</code> or <code>min</code> or <code>max</code> is NaN.","<code>mode < min</code> or <code>mode > max</code> or <code>mode</code> is NaN.","<code>shape < 0</code> or <code>shape</code> is NaN","Error type returned from <code>Poisson::new</code>.","<code>lambda <= 0</code> or <code>nan</code>.","The Poisson distribution <code>Poisson(lambda)</code>.","The triangular distribution.","Error type returned from [<code>Triangular::new</code>].","<code>max < min</code> or <code>min</code> or <code>max</code> is NaN.","<code>mode < min</code> or <code>mode > max</code> or <code>mode</code> is NaN.","Samples uniformly from the unit ball (surface and …","Samples uniformly from the edge of the unit circle in two …","Samples uniformly from the unit disc in two dimensions.","Samples uniformly from the surface of the unit sphere in …","Error type returned from <code>Weibull::new</code>.","<code>scale <= 0</code> or <code>nan</code>.","<code>shape <= 0</code> or <code>nan</code>.","Samples floating-point numbers according to the Weibull …","Error type returned from <code>WeightedIndex::new</code>.","The provided weight collection contains no items.","A weight is either less than zero, greater than the …","All items in the provided weight collection are zero.","Too many weights are provided (length greater than …","A distribution using weighted sampling of discrete itemsonstruct a new <code>Binomial</code> with the given shape parameters <code>n</code>…","Construct a new <code>Cauchy</code> with the given shape parameters …","Construct a new <code>Dirichlet</code> with the given alpha parameter …","Construct a new <code>Dirichlet</code> with the given shape parameter …","Construct a new <code>Exp</code> with the given shape parameter <code>lambda</code>.","Construct an object representing the <code>Gamma(shape, scale)</code> …","Create a new chi-squared distribution with …","Create a new <code>FisherF</code> distribution, with the given …","Create a new Student t distribution with <code>n</code> degrees of …","Construct an object representing the <code>Beta(alpha, beta)</code> …","Construct a new <code>Geometric</code> with the given shape parameter <code>p</code>…","Constructs a new <code>Hypergeometric</code> with the shape parameters …","Construct a new <code>InverseGaussian</code> distribution with the …","Construct, from mean and standard deviation","Construct, from mean and coefficient of variation","Sample from a z-score","Construct, from (log-space) mean and standard deviation","Construct, from (linear-space) mean and coefficient of …","Sample from a z-score","Construct a new <code>NormalInverseGaussian</code> distribution with …","Construct a new Pareto distribution with given <code>scale</code> and …","Set up the PERT distribution with defined <code>min</code>, <code>max</code> and …","Set up the PERT distribution with defined <code>min</code>, <code>max</code>, <code>mode</code> …","Construct a new <code>Poisson</code> with the given shape parameter …","Set up the Triangular distribution with defined <code>min</code>, <code>max</code> …","Construct a new <code>Weibull</code> distribution with given <code>scale</code> and …","Create a new <code>Uniform</code> instance which samples uniformly …","Create a new <code>Uniform</code> instance which samples uniformly …","Construct a new <code>Bernoulli</code> with the given probability of …","Construct a new <code>Bernoulli</code> with the probability of success …","Creates a new a <code>WeightedIndex</code> [<code>Distribution</code>] using the …","Update a subset of weights, without changing the number …"],"i":[0,0,1,0,2,2,2,2,0,0,0,3,0,4,4,4,4,4,4,0,5,0,6,6,0,0,0,0,0,0,0,7,0,0,8,8,0,0,0,0,0,0,9,9,0,0,10,0,0,11,11,11,0,12,0,0,0,0,13,13,0,0,14,0,15,15,15,0,0,16,16,0,0,0,17,0,0,0,18,18,18,0,0,0,19,19,0,20,20,0,0,0,0,0,21,21,0,22,22,0,0,0,23,23,23,0,24,0,0,0,25,25,0,0,0,0,0,26,26,0,0,27,27,27,27,0,1,1,1,1,1,1,1,1,1,1,28,28,28,28,28,28,28,28,28,28,9,9,9,9,9,9,9,9,9,9,9,29,29,29,29,29,29,29,29,29,29,10,10,10,10,10,10,10,10,10,10,10,30,30,30,30,30,30,30,30,30,30,11,11,11,11,11,11,11,11,11,11,11,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,12,12,12,12,12,12,12,12,12,12,12,33,33,33,33,33,33,33,33,33,33,15,15,15,15,15,15,15,15,15,15,15,34,34,34,34,34,34,34,34,34,34,14,14,14,14,14,14,14,14,14,14,14,35,35,35,35,35,35,35,35,35,35,16,16,16,16,16,16,16,16,16,16,16,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,13,13,13,13,13,13,13,13,13,13,13,38,38,38,38,38,38,38,38,38,38,17,17,17,17,17,17,17,17,17,17,17,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,20,20,20,20,20,20,20,20,20,20,20,44,44,44,44,44,44,44,44,44,44,21,21,21,21,21,21,21,21,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,22,22,22,22,22,22,22,22,22,22,22,47,47,47,47,47,47,47,47,47,47,23,23,23,23,23,23,23,23,23,23,23,48,48,48,48,48,48,48,48,48,48,24,24,24,24,24,24,24,24,24,24,24,49,49,49,49,49,49,49,49,49,49,25,25,25,25,25,25,25,25,25,25,25,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,26,26,26,26,26,26,26,26,26,26,26,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,61,7,7,7,7,7,7,7,7,7,7,7,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,65,27,27,27,27,27,27,27,27,27,27,27,66,66,66,66,66,66,66,66,66,66,62,56,61,65,59,55,58,63,57,66,64,7,60,27,63,61,58,64,66,7,65,57,59,27,55,56,27,7,55,55,65,65,65,65,65,65,65,65,65,65,65,65,60,65,63,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,66,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,63,65,65,65,65,64,55,65,64,65,61,62,62,27,7,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,58,58,58,58,57,57,57,56,56,56,56,56,59,59,59,56,56,56,56,56,58,58,58,58,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,1,28,9,29,10,30,11,31,32,12,33,15,34,14,35,16,36,37,13,38,17,39,40,18,19,41,42,43,20,44,21,45,46,22,47,23,48,24,49,25,50,51,52,53,54,26,9,10,11,12,15,14,16,13,17,18,20,22,23,24,25,26,9,10,11,12,15,14,16,13,17,18,19,20,21,22,23,24,25,26,1,28,9,29,10,30,11,31,32,12,33,15,34,14,35,16,36,37,13,38,17,39,40,18,42,43,20,44,46,22,47,23,48,24,49,25,50,51,52,53,54,26,1,28,29,30,31,31,32,33,34,35,36,37,38,39,40,41,42,42,43,44,45,46,47,48,49,50,51,52,53,54,28,29,30,30,32,33,34,35,36,37,38,40,41,43,43,43,44,44,44,45,46,47,47,48,49,54,55,55,61,61,66,66],"f":[null,null,[[["vec",3]],[["result",4],["weightederror",4]]],null,null,null,[[["u32",15]],["option",4]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,[[]],null,[[]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,[[]],[[],["distiter",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["open01",3]],[[],["bernoulli",3]],[[],["uniformfloat",3]],[[],["openclosed01",3]],[[],["weightedindex",3]],[[],["bernoullierror",4]],[[],["standard",3]],[[],["uniformchar",3]],[[],["uniformduration",3]],[[],["weightederror",4]],[[],["uniform",3]],[[],["uniformint",3]],[[["weightederror",4]],["bool",15]],[[["bernoullierror",4]],["bool",15]],[[["rangeinclusive",3]],["uniform",3]],[[["range",3]],["uniform",3]],[[]],[[]],[[],["i8",15]],[[]],[[]],[[]],[[]],[[]],[[],["nonzerou128",3]],[[]],[[]],[[]],[[],["u8",15]],[[],["nonzerou32",3]],[[],["f32",15]],[[]],[[]],[[],["u16",15]],[[]],[[],["i64",15]],[[],["nonzerou8",3]],[[],["i128",15]],[[]],[[]],[[]],[[],["u32",15]],[[]],[[],["i32",15]],[[]],[[]],[[]],[[],["usize",15]],[[],["f32",15]],[[],["wrapping",3]],[[]],[[],["u8",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["f64",15]],[[]],[[]],[[],["char",15]],[[],["u64",15]],[[],["nonzerou16",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["nonzerou64",3]],[[]],[[],["i16",15]],[[],["u128",15]],[[],["isize",15]],[[]],[[],["f64",15]],[[]],[[]],[[]],[[]],[[],["f64",15]],[[]],[[]],[[],["f32",15]],[[],["nonzerousize",3]],[[],["bool",15]],[[],["option",4]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],[["uniformint",3],["isize",15]]],[[],[["uniformint",3],["isize",15]]],[[]],[[]],[[]],[[],[["uniformint",3],["u16",15]]],[[],[["uniformint",3],["u16",15]]],[[]],[[]],[[]],[[],[["uniformint",3],["i8",15]]],[[],[["uniformint",3],["i8",15]]],[[]],[[]],[[]],[[],[["usize",15],["uniformint",3]]],[[],[["usize",15],["uniformint",3]]],[[]],[[]],[[]],[[],[["uniformfloat",3],["f64",15]]],[[],[["uniformfloat",3],["f64",15]]],[[]],[[]],[[],["uniformchar",3]],[[],["uniformchar",3]],[[]],[[],[["u128",15],["uniformint",3]]],[[],[["u128",15],["uniformint",3]]],[[]],[[]],[[]],[[],["uniformduration",3]],[[],["uniformduration",3]],[[],["duration",3]],[[],[["u64",15],["uniformint",3]]],[[],[["u64",15],["uniformint",3]]],[[]],[[]],[[]],[[],[["uniformfloat",3],["f32",15]]],[[],[["uniformfloat",3],["f32",15]]],[[]],[[]],[[],[["uniformint",3],["i32",15]]],[[],[["uniformint",3],["i32",15]]],[[]],[[]],[[]],[[],[["i64",15],["uniformint",3]]],[[],[["i64",15],["uniformint",3]]],[[]],[[]],[[]],[[],[["uniformint",3],["u8",15]]],[[],[["uniformint",3],["u8",15]]],[[]],[[]],[[]],[[],[["uniformint",3],["i128",15]]],[[],[["uniformint",3],["i128",15]]],[[]],[[]],[[]],[[],[["uniformint",3],["i16",15]]],[[],[["uniformint",3],["i16",15]]],[[]],[[]],[[]],[[],[["u32",15],["uniformint",3]]],[[],[["u32",15],["uniformint",3]]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["chisquarederror",4]],["bool",15]],[[["fisherferror",4]],["bool",15]],[[["betaerror",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["perterror",4]],["bool",15]],[[["error",4]],["bool",15]],[[["triangularerror",4]],["bool",15]],[[["error",4]],["bool",15]],[[]],[[],["binomial",3]],[[],["error",4]],[[],["cauchy",3]],[[],["error",4]],[[],["dirichlet",3]],[[],["error",4]],[[],["exp1",3]],[[],["exp",3]],[[],["error",4]],[[],["gamma",3]],[[],["error",4]],[[],["chisquared",3]],[[],["chisquarederror",4]],[[],["fisherf",3]],[[],["fisherferror",4]],[[],["studentt",3]],[[],["beta",3]],[[],["betaerror",4]],[[],["geometric",3]],[[],["error",4]],[[],["standardgeometric",3]],[[],["hypergeometric",3]],[[],["error",4]],[[],["standardnormal",3]],[[],["normal",3]],[[],["error",4]],[[],["lognormal",3]],[[],["pareto",3]],[[],["error",4]],[[],["pert",3]],[[],["perterror",4]],[[],["poisson",3]],[[],["error",4]],[[],["triangular",3]],[[],["triangularerror",4]],[[],["unitball",3]],[[],["unitcircle",3]],[[],["unitdisc",3]],[[],["unitsphere",3]],[[],["weibull",3]],[[],["error",4]],[[],["usize",15]],[[],["u64",15]],[[]],[[],["vec",3]],[[],["f32",15]],[[],["f64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[],["f32",15]],[[],["f64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15],["u64",15]],[["error",4],["result",4],["binomial",3]]],[[],[["cauchy",3],["error",4],["result",4]]],[[],[["result",4],["dirichlet",3],["error",4]]],[[["usize",15]],[["result",4],["dirichlet",3],["error",4]]],[[],[["error",4],["result",4],["exp",3]]],[[],[["result",4],["gamma",3],["error",4]]],[[],[["result",4],["chisquarederror",4],["chisquared",3]]],[[],[["fisherferror",4],["result",4],["fisherf",3]]],[[],[["chisquarederror",4],["studentt",3],["result",4]]],[[],[["beta",3],["betaerror",4],["result",4]]],[[["f64",15]],[["result",4],["error",4]]],[[["u64",15]],[["result",4],["error",4]]],[[],[["inversegaussian",3],["error",4],["result",4]]],[[],[["normal",3],["result",4],["error",4]]],[[],[["normal",3],["result",4],["error",4]]],[[]],[[],[["lognormal",3],["error",4],["result",4]]],[[],[["lognormal",3],["error",4],["result",4]]],[[]],[[],[["result",4],["error",4],["normalinversegaussian",3]]],[[],[["error",4],["result",4],["pareto",3]]],[[],[["perterror",4],["result",4],["pert",3]]],[[],[["perterror",4],["result",4],["pert",3]]],[[],[["result",4],["poisson",3],["error",4]]],[[],[["result",4],["triangular",3],["triangularerror",4]]],[[],[["weibull",3],["result",4],["error",4]]],[[],["uniform",3]],[[],["uniform",3]],[[["f64",15]],[["bernoullierror",4],["bernoulli",3],["result",4]]],[[["u32",15]],[["bernoullierror",4],["bernoulli",3],["result",4]]],[[],[["weightedindex",3],["result",4],["weightederror",4]]],[[],[["result",4],["weightederror",4]]]],"p":[[3,"WeightedAliasIndex"],[8,"AliasableWeight"],[8,"SampleUniform"],[8,"UniformSampler"],[8,"SampleBorrow"],[8,"SampleRange"],[4,"BernoulliError"],[8,"Distribution"],[4,"BinomialError"],[4,"CauchyError"],[4,"DirichletError"],[4,"ExpError"],[4,"BetaError"],[4,"ChiSquaredError"],[4,"GammaError"],[4,"FisherFError"],[4,"GeoError"],[4,"HyperGeoError"],[4,"InverseGaussianError"],[4,"NormalError"],[4,"NormalInverseGaussianError"],[4,"ParetoError"],[4,"PertError"],[4,"PoissonError"],[4,"TriangularError"],[4,"WeibullError"],[4,"WeightedError"],[3,"Binomial"],[3,"Cauchy"],[3,"Dirichlet"],[3,"Exp1"],[3,"Exp"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"Beta"],[3,"Geometric"],[3,"StandardGeometric"],[3,"Hypergeometric"],[3,"InverseGaussian"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"NormalInverseGaussian"],[3,"Pareto"],[3,"Pert"],[3,"Poisson"],[3,"Triangular"],[3,"UnitBall"],[3,"UnitCircle"],[3,"UnitDisc"],[3,"UnitSphere"],[3,"Weibull"],[3,"Uniform"],[3,"UniformInt"],[3,"UniformChar"],[3,"UniformFloat"],[3,"UniformDuration"],[3,"Alphanumeric"],[3,"Bernoulli"],[3,"DistIter"],[3,"Open01"],[3,"OpenClosed01"],[3,"Standard"],[3,"WeightedIndex"]]},\
"rawpointer":{"doc":"Rawpointer adds extra utility methods to raw pointers …","t":[5,8,10,11,11,11,11,11,11,11,11,11],"n":["ptrdistance","PointerExt","offset","add","sub","pre_inc","post_inc","pre_dec","post_dec","inc","dec","stride_offset"],"q":["rawpointer","","","","","","","","","","",""],"d":["Return the number of elements of <code>T</code> from <code>start</code> to <code>end</code>. …","Extension methods for raw pointers","","","","Increment the pointer by 1, and return its new value.","Increment the pointer by 1, but return its old value.","Decrement the pointer by 1, and return its new value.","Decrement the pointer by 1, but return its old value.","Increment by 1","Decrement by 1","Offset the pointer by <code>s</code> multiplied by <code>index</code>."],"i":[0,0,1,1,1,1,1,1,1,1,1,1],"f":[[[],["usize",15]],null,[[["isize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["isize",15]]]],"p":[[8,"PointerExt"]]}\
}');
initSearch(searchIndex);